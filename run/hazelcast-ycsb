#!/bin/bash

#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# Includes
source "app/hazelcast"
source "app/hazelcast-ycsb"

_cdepl_run_application()
{
	if [ "$#" != "7" ]; then
		util_log_error "Missing benchmark arguments"
		util_log_error "Usage: <num storage nodes> <num ycsb nodes> <num ycsb load threads> <num ycsb benchmark threads> <workload: a, b, g, x> <record count per node> <operation count per node>"
		return
	fi

    local cluster_total_nodes=$(cdepl_cluster_get_alloc_node_count)
	local hazelcast_path="$(cdepl_cluster_application_install_dir)/hazelcast"
    local hazelcast_ycsb_path="$(cdepl_cluster_application_install_dir)/ycsb-hazelcast"

	if [ "$cluster_total_nodes" -lt "2" ]; then
		util_log_error "Not enough nodes ($cluster_total_nodes), minimum is 2"
		return
	fi

	local storage_nodes=$1
	local ycsb_nodes=$2
	local ycsb_load_threads=$3
	local ycsb_threads=$4
	local workload=$5
	local recordcount_per_node=$6
	local operationcount=$7

	if [ "$((storage_nodes + ycsb_nodes))" -gt "$cluster_total_nodes" ]; then
		util_log_error "Not enough nodes for $storage_nodes storage nodes and $ycsb_nodes ycsb benchmark nodes: total $cluster_total_nodes"
		return
	fi

	# Start a hazelcast cluster first
	# Initialize deployment
	cdepl_app_hazelcast_init $hazelcast_path
	cdepl_app_hazelcast_ycsb_init $hazelcast_ycsb_path

	local ycsb_range_start=$storage_nodes
	local ycsb_range_end=$((ycsb_range_start + ycsb_nodes - 1))

	case $workload in
		"a")
			cdepl_app_hazelcast_ycsb_workload_a $recordcount_per_node $operationcount
			;;
		"b")
			cdepl_app_hazelcast_ycsb_workload_b $recordcount_per_node $operationcount
			;;
		"g")
			cdepl_app_hazelcast_ycsb_workload_g $recordcount_per_node $operationcount
			;;
		x=*)
			vals=$(echo "$workload" | cut -d "=" -f 2)
			reads=$(echo "$vals" | cut -d "," -f 1)
			writes=$(echo "$vals" | cut -d "," -f 2)
			dist=$(echo "$vals" | cut -d "," -f 3)
			batch=$(echo "$vals" | cut -d "," -f 4)
			csize=$(echo "$vals" | cut -d "," -f 5)

			if [ ! "$reads" ] || [ ! "$writes" ] || [ ! "$dist" ] || [ ! "$batch" ] || [ ! "$csize" ]; then
				util_log_error "Invalid custom workload format, must be: x=<reads>,<writes>,<dist>,<batch>,<csize> (e.g. x=0.5,0.5,zipfian,1,64 )"
				return
			fi

			cdepl_app_hazelcast_ycsb_workload $recordcount_per_node $operationcount $reads $writes $dist $batch $csize
			;;
		*)
			util_log_error "Invalid workload specified: $workload"
			return
			;;
	esac

	# Config load clients
	local counter="0"

	cdepl_app_hazelcast_ycsb_set_cluster_entry_node 0
	cdepl_app_hazelcast_ycsb_total_storage_nodes $storage_nodes

	for i in $(seq $ycsb_range_start $ycsb_range_end); do
		cdepl_app_hazelcast_ycsb_node_type $i "L"
		cdepl_app_hazelcast_ycsb_threads $i $ycsb_load_threads

		cdepl_app_hazelcast_ycsb_insertstart $i $((recordcount_per_node * counter))

		counter=$((counter + 1))
	done

	# Start all storage instances
	cdepl_app_hazelcast_start_node 0 $((storage_nodes - 1))

	# Wait for all storages to be started
	for i in $(seq 0 $((storage_nodes - 1))); do
		cdepl_app_hazelcast_node_wait_started $i
	done

	# Load storage nodes
	cdepl_app_hazelcast_ycsb_start_node $ycsb_range_start $ycsb_range_end

	for i in $(seq $ycsb_range_start $ycsb_range_end); do
        cdepl_app_hazelcast_ycsb_loader_finished_loading $i &
        pids="$pids $!"

        counter=$((counter + 1))

		# Parallel deploy in batches of 10 which is the default limit
		# for parallel connections on ssh servers, stay slightly below
		# this limit (sometimes, 10 causes errors on multiplexing)
		if [ "$counter" -ge "8" ] || [ "$i" = "$ycsb_range_end" ]; then
			wait $pids
			pids=""
			counter=0
		fi
    done 

	# Re-configure ycsb nodes to run as benchmark nodes
	for i in $(seq $ycsb_range_start $ycsb_range_end); do
		cdepl_app_hazelcast_ycsb_node_type $i "B"
		cdepl_app_hazelcast_ycsb_threads $i $ycsb_threads
	done

	# Start benchmark and wait for completion
	cdepl_app_hazelcast_ycsb_start_node $ycsb_range_start $ycsb_range_end

	for i in $(seq $ycsb_range_start $ycsb_range_end); do
		cdepl_app_hazelcast_ycsb_benchmark_wait_finished $i
	done
}