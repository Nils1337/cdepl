#!/bin/bash

#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# Includes
source "app/ramcloud"
source "app/ramcloud-ycsb"

_cdepl_run_application()
{
	if [ "$#" != "9" ]; then
		util_log "Usage: <network locator> <storage size mb per node> <storage worker threads> <num ramcloud storage nodes> <num ycsb benchmark nodes> <num ycsb benchmark threads> <workload: a, b, g> <record count per node> <operation count per node>"
		util_log "Example: infrc 1024 4 1 1 1 a 10000 1000000"
		return
	fi

    local cluster_total_nodes=$(cdepl_cluster_get_alloc_node_count)
	local ramcloud_path="$(cdepl_cluster_application_install_dir)/RAMCloud"
    local ramcloud_ycsb_path="$(cdepl_cluster_application_install_dir)/ramcloud-ycsb"

	if [ "$cluster_total_nodes" -lt "3" ]; then
		util_log_error "Not enough nodes ($cluster_total_nodes), minimum is 3"
		return
	fi

	local network_locator=$1
	local storage_size=$2
	local storage_worker_threads=$3
	local storage_nodes=$4
	local ycsb_nodes=$5
	local ycsb_threads=$6
	local workload=$7
	local recordcount=$8
	local operationcount=$9

	if [ "$((storage_nodes + ycsb_nodes))" -gt "$cluster_total_nodes" ]; then
		util_log_error "Not enough nodes for $storage_nodes storage nodes and $ycsb_nodes ycsb benchmark nodes: total $cluster_total_nodes"
		return
	fi

	# Apply node settings before starting any nodes
	cdepl_app_ramcloud_node_type 0 "C"
	cdepl_app_ramcloud_node_worker_threads 0 $storage_worker_threads

	for i in $(seq 1 $storage_nodes); do
		cdepl_app_ramcloud_node_type $i "S"
		cdepl_app_ramcloud_network_transport $network_locator
		cdepl_app_ramcloud_node_memory $i $storage_size
		cdepl_app_ramcloud_node_worker_threads $i $storage_worker_threads
	done

	# Start coordinator and wait before starting servers
	cdepl_app_ramcloud_start_node 0
	cdepl_app_ramcloud_node_wait_started 0

	# Start all storages
	cdepl_app_ramcloud_start_node 1 $storage_nodes

	# Wait for all storages to be started
	for i in $(seq 1 $storage_nodes); do
		cdepl_app_ramcloud_ycsb_run_as_sudo $i
		cdepl_app_ramcloud_network_transport $network_locator
		cdepl_app_ramcloud_node_wait_started $i
	done

	#############

	local node_range_start=$((1 + storage_nodes))
	local node_range_end=$((node_range_start + ycsb_nodes - 1))

	cdepl_app_ramcloud_ycsb_node_coordinator 0
	cdepl_app_ramcloud_ycsb_total_storage_nodes $storage_nodes

	case $workload in
		"a")
			cdepl_app_ramcloud_ycsb_workload_a $recordcount_per_node $operationcount
			;;
		"b")
			cdepl_app_ramcloud_ycsb_workload_b $recordcount_per_node $operationcount
			;;
		"g")
			cdepl_app_ramcloud_ycsb_workload_g $recordcount_per_node $operationcount
			;;
		x=*)
			vals=$(echo "$workload" | cut -d "=" -f 2)
			reads=$(echo "$vals" | cut -d "," -f 1)
			writes=$(echo "$vals" | cut -d "," -f 2)
			dist=$(echo "$vals" | cut -d "," -f 3)
			batch=$(echo "$vals" | cut -d "," -f 4)
			csize=$(echo "$vals" | cut -d "," -f 5)

			if [ ! "$reads" ] || [ ! "$writes" ] || [ ! "$dist" ] || [ ! "$batch" ] || [ ! "$csize" ]; then
				util_log_error "Invalid custom workload format, must be: x=<reads>,<writes>,<dist>,<batch>,<csize> (e.g. x=0.5,0.5,zipfian,1,64 )"
				return
			fi

			cdepl_app_ramcloud_ycsb_workload $recordcount_per_node $operationcount $reads $writes $dist $batch $csize
			;;
		*)
			util_log_error "Invalid workload specified: $workload"
			return
			;;
	esac

	local counter=0

	for i in $(seq $node_range_start $node_range_end); do
		cdepl_app_ramcloud_ycsb_run_as_sudo $i
		cdepl_app_ramcloud_ycsb_network_transport $network_locator
		cdepl_app_ramcloud_ycsb_node_type $i "L"
		cdepl_app_ramcloud_ycsb_threads $i $ycsb_threads

		cdepl_app_ramcloud_ycsb_insertstart $i $(($recordcount * $counter))
		counter=$((counter + 1))
	done

	cdepl_app_ramcloud_ycsb_start_node $node_range_start $node_range_end

	for i in $(seq $node_range_start $node_range_end); do
		cdepl_app_ramcloud_ycsb_storage_finished_loading $i
	done

	#############

	for i in $(seq $node_range_start $node_range_end); do
		cdepl_app_ramcloud_ycsb_run_as_sudo $i
		cdepl_app_ramcloud_ycsb_network_transport $network_locator
		cdepl_app_ramcloud_ycsb_node_type $i "B"
                cdepl_app_ramcloud_ycsb_threads $i $ycsb_threads
	done

	cdepl_app_ramcloud_ycsb_start_node $node_range_start $node_range_end

	for i in $(seq $node_range_start $node_range_end); do
		cdepl_app_ramcloud_ycsb_benchmark_wait_finished $i
	done
}