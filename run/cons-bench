#!/usr/bin/env bash

source "app/dxraft"
source "app/consul"
source "app/zookeeper"
source "app/cons-bench"
source "app/etcd"

CONSUL_PORT=8500
ZK_PORT=2181
ETCD_PORT=2379


_cdepl_run_application()
{
    local cluster_total_nodes=$(cdepl_cluster_get_alloc_node_count)
    local server_count="$cluster_total_nodes"
    local client_count="1"
    local thread_count="1"
    local write_distribution="1000"
    local iteration_count="10000"
    local read_percentage="0.5"
    local config_path="$(cdepl_cluster_application_install_dir)/dxraft/config/client-config.json"
    local log_level="info"
    local result_folder="results"
    local system=""
    local save_history=false
    local debug_requests=false

	PARAMS=""
	while (( "$#" )); do
	case "$1" in
        --system)
            system=$2
            shift 2
            ;;
		--servers)
			server_count="$2"
			shift 2
			;;
		--clients)
			client_count="$2"
			shift 2
			;;
		--it-count)
			iteration_count="$2"
			shift 2
			;;
		--read-percentage)
			read_percentage="$2"
			shift 2
			;;
		--config-path)
			config_path="$2"
			shift 2
			;;
		--thread-count)
			thread_count="$2"
			shift 2
			;;
        --write-distribution)
            write_distribution="$2"
            shift 2
            ;;
        --log-level)
            log_level="$2"
            shift 2
            ;;
        --result-folder)
            result_folder="$2"
            shift 2
            ;;
        --save-history)
            save_history=true
            shift 1
            ;;
        --debug-requests)
            debug_requests=true
            shift 1
            ;;
        --) # end argument parsing
			shift
			break
			;;
		-*|--*=) # unsupported flags
			echo "Error: Unsupported flag $1" >&2
			exit 1
			;;
		*) # preserve positional arguments
			PARAMS="$PARAMS $1"
			shift
			;;
	esac
	done

    if [ $system == "" ] ; then
        util_log_error "System to test must be specified with --system"
        return
    fi

    if [[ $server_count -gt $cluster_total_nodes ]] ; then
        util_log_error "Server count higher than allocated nodes"
        return
    fi

    if [[ $client_count -gt $cluster_total_nodes ]] ; then
        util_log_error "Client count higher than allocated nodes"
        return
    fi


    if [ $system == "dxraft" ] ; then

        # Initialize dxraft deployment
        cdepl_app_dxraft_init "$(cdepl_cluster_application_install_dir)/dxraft" "$log_level"

        # Kill any still running instances from previous deployments
        cdepl_app_dxraft_node_cleanup 0 $(($server_count - 1))

        # Start all nodes
        cdepl_app_dxraft_start_node 0 $(($server_count - 1))

        cdepl_app_dxraft_wait_started 0 $(($server_count - 1))

        cdepl_app_cons_bench_init "$(cdepl_cluster_application_install_dir)/cons-bench" "dxraft" "$thread_count" "$write_distribution" "$iteration_count" "$read_percentage" "$config_path" "$save_history" "$debug_requests"

    elif [ $system == "zk" ] ; then

        # Initialize zookeeper deployment
        cdepl_app_zookeeper_init "$(cdepl_cluster_application_install_dir)/zookeeper" $ZK_PORT

        # Kill any still running instances from previous deployments
        cdepl_app_zookeeper_cleanup 0 $(($server_count - 1))

        # Start all nodes
        cdepl_app_zookeeper_start 0 $(($server_count - 1))

        cdepl_app_zookeeper_wait_started 0 $(($server_count - 1))

        local server_list=""

        for node in $(seq 0 $(($server_count - 1))); do
            server_list="$server_list$(cdepl_cluster_resolve_node_to_ip $node):$ZK_PORT,"
        done

        cdepl_app_cons_bench_init "$(cdepl_cluster_application_install_dir)/cons-bench" "zookeeper" "$thread_count" "$write_distribution" "$iteration_count" "$read_percentage" "$server_list" "$save_history"

    elif [ $system == "consul" ] ; then

        # Initialize consul deployment
        cdepl_app_consul_init "$(cdepl_cluster_application_install_dir)/consul"

        # Kill any still running instances from previous deployments
        cdepl_app_consul_cleanup 0 $(($server_count - 1))

        # Start all nodes
        cdepl_app_consul_start 0 $(($server_count - 1))

        cdepl_app_consul_wait_started 0 $(($server_count - 1))

        local server_list=""

        for node in $(seq 0 $(($server_count - 1))); do
            server_list="$server_list$(cdepl_cluster_resolve_node_to_ip $node):$CONSUL_PORT,"
        done

        cdepl_app_cons_bench_init "$(cdepl_cluster_application_install_dir)/cons-bench" "consul" "$thread_count" "$write_distribution" "$iteration_count" "$read_percentage" "$server_list" "$save_history"

    elif [ $system == "etcd" ] ; then

        # Initialize etcd deployment
        cdepl_app_etcd_init "$(cdepl_cluster_application_install_dir)/etcd"

        # Kill any still running instances from previous deployments
        cdepl_app_etcd_cleanup 0 $(($server_count - 1))

        # Start all nodes
        cdepl_app_etcd_start 0 $(($server_count - 1))

        # wait_started doesnt work for etcd because etcd does not print log output to file when run in background over ssh
        # cdepl_app_etcd_wait_started 0 $(($server_count - 1))
        sleep 5

        local server_list=""

        for node in $(seq 0 $(($server_count - 1))); do
            server_list="$server_list$(cdepl_cluster_resolve_node_to_ip $node):$ETCD_PORT,"
        done

        cdepl_app_cons_bench_init "$(cdepl_cluster_application_install_dir)/cons-bench" "etcd" "$thread_count" "$write_distribution" "$iteration_count" "$read_percentage" "$server_list" "$save_history"

    fi

	# Kill any still running instances from previous deployments
	cdepl_app_cons_bench_cleanup $((cluster_total_nodes - client_count)) $(($cluster_total_nodes - 1))

	# Start all nodes
	cdepl_app_cons_bench_start $((cluster_total_nodes - client_count)) $(($cluster_total_nodes - 1))

	cdepl_app_cons_bench_wait_finished $((cluster_total_nodes - client_count)) $(($cluster_total_nodes - 1))

	cdepl_app_cons_bench_download_results "$result_folder"

}