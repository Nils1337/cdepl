#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

#!/bin/bash

#
# Example for (basic) dxnet deployment with two nodes
#

TOTAL_NODES=2

# Cluster type and user selected
CLUSTER_TYPE="hhubs"
CLUSTER_USER="user"

# DXRAM parameters
DXNET_PATH="/home/${CLUSTER_USER}/dxnet"

DXNET_PORT_START="22222"

cdepl_script_process_cmd_args()
{
	local stub=""
}

cdepl_script_cluster_node_setup()
{
	# Set the log level to output debug info
	util_log_set_level "$UTIL_LOG_LEVEL_DEBUG"

	# Init the cluster environment to deploy to
	cdepl_cluster_init $CLUSTER_TYPE $CLUSTER_USER

	# Load application modules of apps you want to deploy
	cdepl_cluster_app_load "dxnet"

	# Alloc total number of nodes for this deployment
	cdepl_cluster_node_alloc $TOTAL_NODES

	# Walltime for your deployment, might be ignored depending
	# on cluster environment selected
	cdepl_cluster_walltime "01:00:00"

	# Reserve all nodes exclusive (all resources available)
	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		cdepl_cluster_node_excl $i
	done

	# Set our output path for log files and configurations 
	# for the applications deployed
	cdepl_deploy_setup_out_path $CLUSTER_USER
}

cdepl_script_deploy()
{
	# Initialize dxnet deployment
	cdepl_app_dxnet_init $DXNET_PATH
	
	# Kill any still running instances from previous deployments
	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		cdepl_app_dxnet_node_cleanup $i
	done

	# Both nodes send each other messages 0 -> 1 and 1 -> 0
	cdepl_app_dxnet_node_send_targets 0 1
	cdepl_app_dxnet_node_send_targets 1 0

	depl_app_dxnet_network "eth"

	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		depl_app_dxnet_workload $i 0
		depl_app_dxnet_msg_count $i 100000
		depl_app_dxnet_msg_size $i 64

		# One send thread for both nodes
		cdepl_app_dxnet_node_send_threads $i 1
		# Set 2 message handlers for both nodes, 0 and 1
		cdepl_app_dxnet_node_message_handler $i 2

		# When running localhost, we have to assign different ports for the instances
		cdepl_app_dxnet_node_port $i $DXNET_PORT_START
		DXNET_PORT_START=$((DXNET_PORT_START + 1))
	done

	# Start all instances
	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		cdepl_app_dxnet_start_node $i
	done

	# Wait for all instances to finish, this also checks for runtime errors
	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		cdepl_app_dxnet_node_wait_finished $i
	done

	# Print results
	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		printf "######################\nResults node $i\n"
		cdepl_app_dxnet_node_get_results $i
		printf "######################\n"
	done
	
	# Done
}

cdepl_script_cleanup()
{
	# Kill any leftovers
	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		cdepl_app_dxnet_node_cleanup $i
	done
}
