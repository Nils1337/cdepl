#!/bin/bash

# Example for (basic) dxram deployment with the YCSB

# Every function below can be in separate files as well
# which allows you to combine different cluster configrations 
# with application deployments
# just source them for your final deploy script

TOTAL_NODES=3

# Cluster type and user selected
CLUSTER_TYPE="hhubs"
CLUSTER_USER="user"

# Output path for log files, config files depending
# on the application deployed
OUT_PATH="/home/${CLUSTER_USER}/scratch"

# Parameters for zookeeper
ZK_PATH="/home/${CLUSTER_USER}/zookeeper"
ZK_NODE=0
ZK_PORT=2181

# DXRAM parameters
DX_PATH="/home/${CLUSTER_USER}/ycsb-dxram"

DX_PEER_PORT_START="22222"

# This is called before everything else. Setup your cluster
# environment by defining what type of cluster you want to
# deploy to and declare the resources you want to use 
# for allocations. Resource allocation depends on the 
# type of cluster you used. It might be ignored for some
# cluster types
cdepl_script_cluster_node_setup()
{
	# Init the cluster environment to deploy to
	cdepl_cluster_init $CLUSTER_TYPE $CLUSTER_USER

	# Load application modules of apps you want to deploy
	cdepl_cluster_app_load "zookeeper"
	cdepl_cluster_app_load "dxram-ycsb"

	# Alloc total number of nodes for this deployment
	cdepl_cluster_node_alloc $TOTAL_NODES

	# Walltime for your deployment, might be ignored depending
	# on cluster environment selected
	cdepl_cluster_walltime "01:00:00"

	# Reserve nodes exclusive (all resources available)
	for i in `seq 0 $((TOTAL_NODES - 1))`; do
		cdepl_cluster_node_excl $i
	done

	# Set our output path for log files and configurations 
	# for the applications deployed
	cdepl_deploy_out_path $OUT_PATH
}

# Do environment setup
# This is executed after all nodes are allocated with the
# resources specified. Resolve dependencies, copy files
# to the target nodes etc
cdepl_script_environment_setup()
{
	for i in `seq 0 $((TOTAL_NODES - 1))`; do
		cdepl_cluster_resolve_dependency $i "java" "1.8"
	done
}

# Application deployment
# Called after environment setup
cdepl_script_deploy()
{
	# Initilize zookeeper deployment
	cdepl_app_zookeeper_init $ZK_PATH

	# Ensure that no (old) zookeeper instance is running on any node
	for i in `seq 0 $((TOTAL_NODES - 1))`; do
		cdepl_app_zookeeper_cleanup $i
	done

	# Start zookeeper instance and wait until started
	cdepl_app_zookeeper_start $ZK_NODE $ZK_PORT
	cdepl_app_zookeeper_wait_started $ZK_NODE

	# Cleanup of failed startups in zookeeper
	cdepl_app_zookeeper_remove $ZK_NODE "/dxram"

	# Initialize dxram-ycsb deployment. Don't use both, dxram and dxram-ycsb
	# This won't work because you need a unified node list for all instances
	# which would be split when using two separate environments
	cdepl_app_dxram_ycsb_init $DX_PATH $ZK_NODE $ZK_PORT
	
	# Kill any still running instances from previous deployments
	for i in `seq 0 $((TOTAL_NODES - 1))`; do
		cdepl_app_dxram_ycsb_node_cleanup $i
	done

	# Basic setup:
	# 1 superpeer, 1 ycsb storage peer, 1 ycsb benchmark peer
	# Use dxram app module functions to setup the superpeer
	# and dxram-ycsb app module function to setup the storage and benchmark peer

	# Apply node settings before starting any nodes
	# Pure DXRAM instance
	cdepl_app_dxram_ycsb_node_type 0 "S"

	# YCSB dxram instances
	cdepl_app_dxram_ycsb_node_type 1 "PS"
	cdepl_app_dxram_ycsb_node_type 2 "PB"

	for i in `seq 0 $((TOTAL_NODES - 1))`; do
		cdepl_app_dxram_ycsb_run_as_sudo $i
		cdepl_app_dxram_ycsb_node_network $i "ib"
	done

	cdepl_app_dxram_ycsb_peer_kvss 1 4096
	cdepl_app_dxram_ycsb_peer_kvss 2 4096

	# YCSB parameter setup
	cdepl_app_dxram_ycsb_total_storage_nodes 1
	cdepl_app_dxram_ycsb_total_benchmark_nodes 1

	cdepl_app_dxram_ycsb_threads 2 4

	cdepl_app_dxram_ycsb_insertstart 1 0
	cdepl_app_dxram_ycsb_workload_a 100000 1000000

	# Start superpeer and wait before starting peers
	cdepl_app_ycsb_dxram_start_node 0
	cdepl_app_dxram_ycsb_node_wait_superpeer_started 0

	# Start storage and wait for loading to complete
	cdepl_app_ycsb_dxram_start_node 1
	cdepl_app_dxram_ycsb_storage_finished_loading 1

	# Start benchmark and wait for completion
	cdepl_app_ycsb_dxram_start_node 2
	cdepl_app_dxram_ycsb_benchmark_wait_finished 2
}

# Execute any cleanup of the deployment
# Executed after application deployment
# If you want to keep all instances running, just leave this empty
# Otherwise, kill the running instances and execute some other
# cleanup tasks
cdepl_script_cleanup()
{
	# Kill all dxram instances
	for i in `seq 0 $((TOTAL_NODES - 1))`; do
		cdepl_app_dxram_ycsb_node_cleanup $i
	done
	
	# Kill zookeeper
	cdepl_app_zookeeper_cleanup 0
}