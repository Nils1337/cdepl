#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

#!/bin/bash

#
# Deploy a ramcloud setup with a coordinator, a specific number of storage
# nodes, ycsb loading clients and ycsb benchmark clients
#

# Cluster settings set in cdepl_script_process_cmd_args
TOTAL_NODES=""
CLUSTER_TYPE=""
CLUSTER_USER=""
CLUSTER_TYPE_INIT_ARGS=""

# Paths set in cdepl_script_process_cmd_args
RAMCLOUD_PATH=""
RAMCLOUD_YCSB_PATH=""

cdepl_script_process_cmd_args()
{
	local total_nodes="$1"
	local cluster_type="$2"
	local cluster_user="$3"
	local cluster_type_init_args="${@:4}"

	if [ ! "$total_nodes" ]; then
		util_log_error "Missing argument 'total_nodes'"
		util_log_error_and_exit "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...]"
	fi

	if [ ! "$cluster_type" ]; then
		util_log_error "Missing argument 'cluster_type'"
		util_log_error_and_exit "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...]"
	fi

	if [ ! "$cluster_user" ]; then
		util_log_error "Missing argument 'cluster_user'"
		util_log_error_and_exit "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...]"
	fi

	TOTAL_NODES="$total_nodes"
	CLUSTER_TYPE="$cluster_type"
	CLUSTER_USER="$cluster_user"

	local cluster_type_init_args=""
	local benchmark_args=""

	# Iterate further cluster type and program arguments
	local prog_args=""
	
	for elem in "${@:4}"; do
		if [ "$elem" = "--" ]; then
			prog_args="1"
			continue
		fi

		if [ ! "$prog_args" ]; then
			if [ ! "$cluster_type_init_args" ]; then
				cluster_type_init_args="$elem"
			else
				cluster_type_init_args="$cluster_type_init_args $elem"
			fi
		else
			if [ ! "$benchmark_args" ]; then
				benchmark_args="$elem"
			else
				benchmark_args="$benchmark_args $elem"
			fi
		fi
	done

	CLUSTER_TYPE_INIT_ARGS="$cluster_type_init_args"
	BENCHMARK_ARGS="$benchmark_args"

	# Check benchmark args here for early abort if invalid
	local argc=$(echo $BENCHMARK_ARGS | wc -w)

	if [ "$argc" != "8" ]; then
		util_log_error "Missing benchmark arguments"
		util_log_error "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...] -- [benchmark args...]"
		util_log_error "Benchmark args: <network locator> <storage size mb per node> <num ramcloud storage nodes> <num ycsb benchmark nodes> <num ycsb benchmark threads> <workload: a, b, g> <record count per node> <operation count per node>"
		util_log_error_and_exit "Example: infrc 1024 1 1 1 a 10000 1000000"
	fi

	RAMCLOUD_PATH="/home/${CLUSTER_USER}/RAMCloud"
	RAMCLOUD_YCSB_PATH="/home/${CLUSTER_USER}/ramcloud-ycsb"
}

cdepl_script_cluster_node_setup()
{
	# Set the log level to output debug info
	util_log_set_level "$UTIL_LOG_LEVEL_DEBUG"

	# Init the cluster environment to deploy to
	cdepl_cluster_init $CLUSTER_TYPE $CLUSTER_USER $CLUSTER_TYPE_INIT_ARGS

	# Load application modules of apps you want to deploy
	cdepl_cluster_app_load "ramcloud"
	cdepl_cluster_app_load "ramcloud-ycsb"

	# Alloc total number of nodes for this deployment
	cdepl_cluster_node_alloc $TOTAL_NODES

    # Reserve all nodes exclusive (all resources available)
	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		# TODO make these configurable via args
		#cdepl_cluster_node_excl $i
		cdepl_cluster_node_cpus $i 4
		cdepl_cluster_node_mem $i 4096
	done

	# Set our output path for log files and configurations 
	# for the applications deployed
	cdepl_deploy_setup_out_path $CLUSTER_USER
}

cdepl_script_deploy()
{
	if [ "$TOTAL_NODES" -lt "3" ]; then
		util_log_error_and_exit "Not enough nodes ($TOTAL_NODES), minimum is 3"
	fi

	local network_locator="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 1)"
	local storage_size="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 2)"
	local storage_nodes="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 3)"
	local ycsb_nodes="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 4)"
	local ycsb_threads="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 5)"
	local workload="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 6)"
	local recordcount="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 7)"
	local operationcount="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 8)"	

	# Initialize ramcloud deployment
	cdepl_app_ramcloud_init $RAMCLOUD_PATH
	cdepl_app_ramcloud_ycsb_init $RAMCLOUD_YCSB_PATH $RAMCLOUD_PATH

	# Kill any still running instances from previous deployments
	cdepl_app_ramcloud_node_cleanup 0 $((TOTAL_NODES - 1))

	#############

	# Apply node settings before starting any nodes
	cdepl_app_ramcloud_node_type 0 "C"

	for i in $(seq 1 $storage_nodes); do
		cdepl_app_ramcloud_node_type $i "S"
		cdepl_app_ramcloud_network_transport $network_locator
		cdepl_app_ramcloud_node_memory $i $storage_size
	done

	# Start coordinator and wait before starting servers
	cdepl_app_ramcloud_start_node 0
	cdepl_app_ramcloud_node_wait_started 0

	# Start all storages
	cdepl_app_ramcloud_start_node 1 $storage_nodes

	# Wait for all storages to be started
	for i in $(seq 1 $storage_nodes); do
		cdepl_app_ramcloud_ycsb_run_as_sudo $i
		cdepl_app_ramcloud_network_transport $network_locator
		cdepl_app_ramcloud_node_wait_started $i
	done

	#############

	local node_range_start=$((1 + storage_nodes))
	local node_range_end=$((node_range_start + ycsb_nodes - 1))

	cdepl_app_ramcloud_ycsb_node_coordinator 0
	cdepl_app_ramcloud_ycsb_total_storage_nodes $storage_nodes

	case $workload in
		"a")
			cdepl_app_ramcloud_ycsb_workload_a $recordcount $operationcount
			;;
		"b")
			cdepl_app_ramcloud_ycsb_workload_b $recordcount $operationcount
			;;
		"g")
			cdepl_app_ramcloud_ycsb_workload_g $recordcount $operationcount
			;;
		*)
			util_log_error_and_exit "Invalid workload specified: $workload"
			;;
	esac

	local counter=0

	for i in $(seq $node_range_start $node_range_end); do
		cdepl_app_ramcloud_ycsb_run_as_sudo $i
		cdepl_app_ramcloud_ycsb_network_transport $network_locator
		cdepl_app_ramcloud_ycsb_node_type $i "L"

		cdepl_app_ramcloud_ycsb_insertstart $i $(($recordcount * $counter))
		counter=$((counter + 1))
	done

	cdepl_app_ramcloud_ycsb_start_node $node_range_start $node_range_end

	for i in $(seq $node_range_start $node_range_end); do
		cdepl_app_ramcloud_ycsb_storage_finished_loading $i
	done

	#############

	for i in $(seq $node_range_start $node_range_end); do
		cdepl_app_ramcloud_ycsb_run_as_sudo $i
		cdepl_app_ramcloud_ycsb_network_transport $network_locator
		cdepl_app_ramcloud_ycsb_node_type $i "B"
	done

	cdepl_app_ramcloud_ycsb_start_node $node_range_start $node_range_end

	for i in $(seq $node_range_start $node_range_end); do
		cdepl_app_ramcloud_ycsb_benchmark_wait_finished $i
	done
}

cdepl_script_cleanup()
{
    # Don't cleanup here, use a separate kill script instead
    local stub=""
}