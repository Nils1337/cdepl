#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

#!/bin/bash

#
# Deploy a ycsb setup with one superpeer, an arbitrary number of peers with
# ycsb load instances and ycsb benchmark instaces after loading has finished 
#

# Cluster settings set in cdepl_script_process_cmd_args
TOTAL_NODES=""
CLUSTER_TYPE=""
CLUSTER_USER=""
CLUSTER_TYPE_INIT_ARGS=""

# Parameters for zookeeper
ZK_PATH=""
ZK_NODE=0
ZK_PORT=2181

DX_PEER_PORT_START="22222"

# Paths set in cdepl_script_process_cmd_args
DXRAM_YCSB_PATH=""

cdepl_script_process_cmd_args()
{
	local total_nodes="$1"
	local cluster_type="$2"
	local cluster_user="$3"
	local cluster_type_init_args="${@:4}"

	if [ ! "$total_nodes" ]; then
		util_log_error "Missing argument 'total_nodes'"
		util_log_error_and_exit "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...]"
	fi

	if [ ! "$cluster_type" ]; then
		util_log_error "Missing argument 'cluster_type'"
		util_log_error_and_exit "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...]"
	fi

	if [ ! "$cluster_user" ]; then
		util_log_error "Missing argument 'cluster_user'"
		util_log_error_and_exit "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...]"
	fi

	TOTAL_NODES="$total_nodes"
	CLUSTER_TYPE="$cluster_type"
	CLUSTER_USER="$cluster_user"

	local cluster_type_init_args=""
	local benchmark_args=""

	# Iterate further cluster type and program arguments
	local prog_args=""
	
	for elem in "${@:4}"; do
		if [ "$elem" = "--" ]; then
			prog_args="1"
			continue
		fi

		if [ ! "$prog_args" ]; then
			if [ ! "$cluster_type_init_args" ]; then
				cluster_type_init_args="$elem"
			else
				cluster_type_init_args="$cluster_type_init_args $elem"
			fi
		else
			if [ ! "$benchmark_args" ]; then
				benchmark_args="$elem"
			else
				benchmark_args="$benchmark_args $elem"
			fi
		fi
	done

	CLUSTER_TYPE_INIT_ARGS="$cluster_type_init_args"
	BENCHMARK_ARGS="$benchmark_args"

	# Check benchmark args here for early abort if invalid
	local argc=$(echo $BENCHMARK_ARGS | wc -w)

	if [ "$argc" != "10" ]; then
		util_log_error "Missing benchmark arguments"
		util_log_error "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...] -- [benchmark args...]"
		util_log_error_and_exit "Benchmark args: <network type: eth, ib> <num dxram storage nodes> <num ycsb benchmark nodes> <storage size mb per node> <num message handler storages> <num message handlers benchmark clients> <num ycsb benchmark threads> <workload: a, b, g, x> <record count per node> <operation count per node>"
	fi

	DXRAM_YCSB_PATH="/home/${CLUSTER_USER}/ycsb-dxram"
	ZK_PATH="/home/${CLUSTER_USER}/zookeeper"
}

cdepl_script_cluster_node_setup()
{
	# Set the log level to output debug info
	util_log_set_level "$UTIL_LOG_LEVEL_DEBUG"

	# Init the cluster environment to deploy to
	cdepl_cluster_init $CLUSTER_TYPE $CLUSTER_USER $CLUSTER_TYPE_INIT_ARGS

	# Load application modules of apps you want to deploy
	cdepl_cluster_app_load "zookeeper"
	cdepl_cluster_app_load "dxram-ycsb"
	cdepl_cluster_app_load "dxram"

	# Alloc total number of nodes for this deployment
	cdepl_cluster_node_alloc $TOTAL_NODES

    # Reserve all nodes exclusive (all resources available)
	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		cdepl_cluster_node_excl $i
	done

	# Set our output path for log files and configurations 
	# for the applications deployed
	cdepl_deploy_setup_out_path $CLUSTER_USER
}

cdepl_script_deploy()
{
	if [ "$TOTAL_NODES" -lt "3" ]; then
		util_log_error_and_exit "Not enough nodes ($TOTAL_NODES), minimum is 3"
	fi

	local network_type="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 1)"
	local storage_nodes="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 2)"
	local ycsb_nodes="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 3)"
	local storage_size="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 4)"
	local num_message_handler_storages="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 5)"
	local num_message_handler_benchmark="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 6)"
	local ycsb_threads="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 7)"
	local workload="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 8)"
	local recordcount_per_node="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 9)"
	local operationcount="$(echo $BENCHMARK_ARGS | cut -d ' ' -f 10)"

	if [ "$((1 + storage_nodes + ycsb_nodes))" -gt "$TOTAL_NODES" ]; then
		util_log_error_and_exit "Not enough nodes for 1 superpeer, $storage_nodes storage nodes and $ycsb_nodes ycsb benchmark nodes: total $TOTAL_NODES"
	fi

	# Initilize zookeeper deployment
	cdepl_app_zookeeper_init $ZK_PATH

	# Ensure that no (old) zookeeper instance is running on any node
	for i in `seq 0 $((TOTAL_NODES - 1))`; do
		cdepl_app_zookeeper_cleanup $i
	done

	# Start zookeeper instance and wait until started
	cdepl_app_zookeeper_start $ZK_NODE $ZK_PORT
	cdepl_app_zookeeper_wait_started $ZK_NODE

	# Cleanup of failed startups in zookeeper
	cdepl_app_zookeeper_remove $ZK_NODE "/dxram"

	# Start a DXRAM cluster first
	# Initialize deployment
	cdepl_app_dxram_init $DXRAM_YCSB_PATH $ZK_NODE $ZK_PORT
	cdepl_app_dxram_ycsb_init $DXRAM_YCSB_PATH $ZK_NODE $ZK_PORT

	# Kill any still running instances from previous deployments
	cdepl_app_dxram_node_cleanup 0 $((TOTAL_NODES - 1))
	cdepl_app_dxram_ycsb_node_cleanup 0 $((TOTAL_NODES - 1))

	local ycsb_range_start=$((1 + storage_nodes))
	local ycsb_range_end=$((ycsb_range_start + ycsb_nodes - 1))

	# Config superpeer
	cdepl_app_dxram_node_type 0 "S"
	cdepl_app_dxram_run_as_sudo 0
	cdepl_app_dxram_node_network 0 $network_type
		
	# Config storage peers
	for i in $(seq 1 $storage_nodes); do
		cdepl_app_dxram_run_as_sudo $i
		cdepl_app_dxram_node_network $i $network_type
		cdepl_app_dxram_node_type $i "P"
		cdepl_app_dxram_peer_kvss $i $storage_size
		cdepl_app_dxram_node_message_handler $i $num_message_handler_storages
		cdepl_app_dxram_node_port $i $DX_PEER_PORT_START
		DX_PEER_PORT_START=$((DX_PEER_PORT_START + 1))
	done

	# YCSB parameter setup
	cdepl_app_dxram_ycsb_total_storage_nodes $storage_nodes

	case $workload in
		"a")
			cdepl_app_dxram_ycsb_workload_a $recordcount_per_node $operationcount
			;;
		"b")
			cdepl_app_dxram_ycsb_workload_b $recordcount_per_node $operationcount
			;;
		"g")
			cdepl_app_dxram_ycsb_workload_g $recordcount_per_node $operationcount
			;;
		x=*)
			vals=$(echo "$workload" | cut -d "=" -f 2)
			reads=$(echo "$vals" | cut -d "," -f 1)
			writes=$(echo "$vals" | cut -d "," -f 2)
			dist=$(echo "$vals" | cut -d "," -f 3)
			batch=$(echo "$vals" | cut -d "," -f 4)
			csize=$(echo "$vals" | cut -d "," -f 5)

			if [ ! "$reads" ] || [ ! "$writes" ] || [ ! "$dist" ] || [ ! "$batch" ] || [ ! "$csize" ]; then
				util_log_error_and_exit "Invalid custom workload format, must be: x=<reads>,<writes>,<dist>,<batch>,<csize> (e.g. x=0.5,0.5,zipfian,1,64 )"
			fi

			cdepl_app_dxram_ycsb_workload $recordcount_per_node $operationcount $reads $writes $dist $batch $csize
			;;
		*)
			util_log_error_and_exit "Invalid workload specified: $workload"
			;;
	esac

	# Config load peers
	local counter="0"

	for i in $(seq $ycsb_range_start $ycsb_range_end); do
		cdepl_app_dxram_ycsb_run_as_sudo $i
		cdepl_app_dxram_ycsb_node_network $i $network_type
		cdepl_app_dxram_ycsb_node_type $i "L"
		# When running localhost, we have to assign different ports for the peers
		cdepl_app_dxram_ycsb_node_port $i $DX_PEER_PORT_START
		DX_PEER_PORT_START=$((DX_PEER_PORT_START + 1))

		cdepl_app_dxram_ycsb_load_target_peer_idx $i $counter
		cdepl_app_dxram_ycsb_insertstart $i $((recordcount_per_node * counter))

		counter=$((counter + 1))
	done

	# Start superpeer and wait before starting peers
	cdepl_app_dxram_start_node 0
	cdepl_app_dxram_node_wait_started 0

	# Start all storage peers
	cdepl_app_dxram_start_node 1 $storage_nodes

	# Wait for all peers to be started
	for i in $(seq 1 $storage_nodes); do
		cdepl_app_dxram_node_wait_started $i
	done

	# Load storage nodes
	cdepl_app_ycsb_dxram_start_node $ycsb_range_start $ycsb_range_end

	for i in $(seq $ycsb_range_start $ycsb_range_end); do
        cdepl_app_dxram_ycsb_loader_finished_loading $i &
        pids="$pids $!"

        counter=$((counter + 1))

		# Parallel deploy in batches of 10 which is the default limit
		# for parallel connections on ssh servers, stay slightly below
		# this limit (sometimes, 10 causes errors on multiplexing)
		if [ "$counter" -ge "8" ] || [ "$i" = "$ycsb_range_end" ]; then
			wait $pids
			pids=""
			counter=0
		fi
    done 

	# Re-configure ycsb nodes to run as benchmark nodes
	for i in $(seq $ycsb_range_start $ycsb_range_end); do
		cdepl_app_dxram_ycsb_run_as_sudo $i
		cdepl_app_dxram_ycsb_node_network $i $network_type
		cdepl_app_dxram_ycsb_node_type $i "B"
		cdepl_app_dxram_ycsb_node_message_handler $i $num_message_handler_benchmark
		cdepl_app_dxram_ycsb_threads $i $ycsb_threads
	done

	sleep 1

	# Start benchmark and wait for completion
	cdepl_app_ycsb_dxram_start_node $ycsb_range_start $ycsb_range_end

	for i in $(seq $ycsb_range_start $ycsb_range_end); do
		cdepl_app_dxram_ycsb_benchmark_wait_finished $i
	done
}

cdepl_script_cleanup()
{
    cdepl_app_dxram_ycsb_node_cleanup 0 $((TOTAL_NODES - 1))

	cdepl_app_zookeeper_cleanup $ZK_NODE
}
