#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

#!/bin/bash

#
# Deploy a simple dxram setup with a single superpeer and X peers 
# (X = total nodes - 1)
# A few basic settings are already hardcoded in this script (e.g. key-value 
# store mem). Use this script to get started with deployment and adjust it
# according to your target setup and requirements
#

# Cluster settings set in cdepl_script_process_cmd_args
TOTAL_NODES=""
CLUSTER_TYPE=""
CLUSTER_USER=""
CLUSTER_TYPE_INIT_ARGS=""

# Paths set in cdepl_script_process_cmd_args
DXRAM_PATH=""
ZK_PATH=""

# Zookeeper config values
ZK_NODE=0
ZK_PORT=2181

DX_PEER_PORT_START="22222"
DXRAM_ARGS=""

cdepl_script_process_cmd_args()
{
	local total_nodes="$1"
	local cluster_type="$2"
	local cluster_user="$3"
	local cluster_type_init_args="${@:4}"

	if [ ! "$total_nodes" ]; then
		util_log_error "Missing argument 'total_nodes'"
		util_log_error_and_exit "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...]"
	fi

	if [ ! "$cluster_type" ]; then
		util_log_error "Missing argument 'cluster_type'"
		util_log_error_and_exit "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...]"
	fi

	if [ ! "$cluster_user" ]; then
		util_log_error "Missing argument 'cluster_user'"
		util_log_error_and_exit "Usage: <total_nodes> <cluster_type> <cluster_user> [init args for cluster type...]"
	fi

	TOTAL_NODES="$total_nodes"
	CLUSTER_TYPE="$cluster_type"
	CLUSTER_USER="$cluster_user"

	local cluster_type_init_args=""
	local benchmark_args=""

	# Iterate further cluster type and program arguments
	local prog_args=""
	
	for elem in "${@:4}"; do
		if [ "$elem" = "--" ]; then
			prog_args="1"
			continue
		fi

		if [ ! "$prog_args" ]; then
			if [ ! "$cluster_type_init_args" ]; then
				cluster_type_init_args="$elem"
			else
				cluster_type_init_args="$cluster_type_init_args $elem"
			fi
		else
			if [ ! "$benchmark_args" ]; then
				benchmark_args="$elem"
			else
				benchmark_args="$benchmark_args $elem"
			fi
		fi
	done

	CLUSTER_TYPE_INIT_ARGS="$cluster_type_init_args"
	DXRAM_ARGS="$benchmark_args"

	if [ "$DXRAM_PATH" = "" ]; then
		DXRAM_PATH="/home/${CLUSTER_USER}/dxram"
	fi
	if [ "$ZK_PATH" = "" ]; then
		ZK_PATH="/home/${CLUSTER_USER}/zookeeper"
	fi
}

cdepl_script_cluster_node_setup()
{
	# Set the log level to output debug info
	util_log_set_level "$UTIL_LOG_LEVEL_DEBUG"

	# Init the cluster environment to deploy to
	cdepl_cluster_init $CLUSTER_TYPE $CLUSTER_USER $CLUSTER_TYPE_INIT_ARGS

	# Load application modules of apps you want to deploy
	cdepl_cluster_app_load "zookeeper"
	cdepl_cluster_app_load "dxram"

	# Alloc total number of nodes for this deployment
	cdepl_cluster_node_alloc $TOTAL_NODES

    # Reserve all nodes exclusive (all resources available)
	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		# DXRAM is not optimized for multi socket setups and doesn't perform
		# well with them, limit to single socket
		cdepl_cluster_node_cpu_limit_single_socket $i
		cdepl_cluster_node_excl $i
	done

	# Set our output path for log files and configurations 
	# for the applications deployed
	cdepl_deploy_setup_out_path $CLUSTER_USER
}

cdepl_script_deploy()
{
	# Parse cmd arguments
	local superpeers_on_peer_nodes=""
	local num_superpeers="1"
	local num_peers="$((TOTAL_NODES - 1))"
	local kvss_mb="1024"
	
	local argc=$(echo $DXRAM_ARGS | wc -w)

	if [ "$argc" -ge "1" ]; then
		superpeers_on_peer_nodes="$(echo $DXRAM_ARGS | cut -d ' ' -f 1)"
	fi

	if [ "$argc" -ge "2" ]; then
		num_superpeers="$(echo $DXRAM_ARGS | cut -d ' ' -f 2)"
	fi

	if [ "$argc" -ge "3" ]; then
		num_peers="$(echo $DXRAM_ARGS | cut -d ' ' -f 3)"
	fi

	if [ "$argc" -ge "4" ]; then
		kvss_mb="$(echo $DXRAM_ARGS | cut -d ' ' -f 4)"
	fi

	local peer_node_offset=""

	# Some arg verification
	if [ "$num_superpeers" -lt "1" ]; then
		util_log_error_and_exit "Specify at least one superpeer"
	fi

	if [ "$num_peers" -lt "1" ]; then
		util_log_error_and_exit "Specify at least one peer"
	fi

	if [ "$superpeers_on_peer_nodes" = "1" ]; then
		peer_node_offset="0"

		if [ "$num_superpeers" -gt "$TOTAL_NODES" ]; then
			util_log_error_and_exit "Too many superpeers ($num_superpeers) specified, total nodes: $TOTAL_NODES"
		fi	

		if [ "$num_peers" -gt "$TOTAL_NODES" ]; then
			util_log_error_and_exit "Too many peers ($num_peers) specified, total nodes: $TOTAL_NODES"
		fi
	else
		peer_node_offset="$num_superpeers"

		if [ "$((num_superpeers + num_peers))" -gt "$TOTAL_NODES" ]; then
			util_log_error_and_exit "Too many superpeers ($num_superpeers) + peers ($num_peers) specified, total nodes: $TOTAL_NODES"
		fi
	fi

	util_log "Starting $num_superpeers superpeers and $num_peers peers (kvss: $kvss_mb MB each)"

	# Initilize zookeeper deployment
	cdepl_app_zookeeper_init $ZK_PATH

	# Ensure that no (old) zookeeper instance is running on any node
	for i in $(seq 0 $((TOTAL_NODES - 1))); do
		cdepl_app_zookeeper_cleanup $i
	done

	# Start zookeeper instance and wait until started
	cdepl_app_zookeeper_start $ZK_NODE $ZK_PORT
	cdepl_app_zookeeper_wait_started $ZK_NODE

	# Cleanup of failed startups in zookeeper
	cdepl_app_zookeeper_remove $ZK_NODE "/dxram"

	# Initialize dxram deployment
	cdepl_app_dxram_init $DXRAM_PATH $ZK_NODE $ZK_PORT
	
	# Kill any still running instances from previous deployments
	cdepl_app_dxram_node_cleanup 0 $((TOTAL_NODES - 1))

	# Config superpeers
	for i in $(seq 0 $((num_superpeers - 1))); do
		cdepl_app_dxram_node_type $i "S"
	done

	# Config peers
	for i in $(seq $peer_node_offset $((peer_node_offset + num_peers - 1))); do
		cdepl_app_dxram_node_type $i "P"
		cdepl_app_dxram_peer_kvss $i $kvss_mb
		# When running localhost, we have to assign different ports for the peers
		cdepl_app_dxram_node_port $i $DX_PEER_PORT_START
		DX_PEER_PORT_START=$((DX_PEER_PORT_START + 1))
	done

	# Start superpeers
	cdepl_app_dxram_start_node 0 $((num_superpeers - 1))

	for i in $(seq 0 $((num_superpeers - 1))); do
		cdepl_app_dxram_node_wait_started $i
	done

	# Start all peers
	cdepl_app_dxram_start_node $peer_node_offset $((peer_node_offset + num_peers - 1))

	# Wait for all peers to be started
	for i in $(seq $peer_node_offset $((peer_node_offset + num_peers - 1))); do
		cdepl_app_dxram_node_wait_started $i
	done
}

cdepl_script_cleanup()
{
    # Don't cleanup here, use a separate kill script instead
    local stub=""
}
