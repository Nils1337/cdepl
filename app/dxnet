#!/bin/bash

readonly __DXNET_MAIN_CLASS="de.hhu.bsinfo.dxnet.DXNetMain"
readonly __DXNET_CLASS_PATH="lib/gson-2.7.jar:lib/log4j-api-2.7.jar:lib/log4j-core-2.7.jar"
readonly __DXNET_PROCESS_IDENTIFIER="dxnetdeployscript"

__DXNET_PATH=""
__DXNET_CONFIG_PATH=""
__DXNET_LOG4J_CONFIG_PATH=""
# Could be dxram.jar or dxnet.jar, autodetect
__DXNET_JAR_FILE=""

__DXNET_OUT_PATH=""
__DXNET_OUT_CONF_PATH=""
__DXNET_OUT_LOG_PATH=""

__DXNET_WORKLOAD=""
__DXNET_MSG_COUNT=""
__DXNET_MSG_SIZE=""
__DXNET_SEND_THREADS=()
__DXNET_SEND_TARGETS=()
__DXNET_NODE_NETWORK=""
__DXNET_NODE_PORT=()
__DXNET_NODE_MSG_HANDLER=()
__DXNET_NODE_RUN_SUDO=()
__DXNET_NODE_REMOTE_DEBUG_PORT=()
__DXNET_NODE_REMOTE_PROFILE_YJP_PORT=()
__DXNET_NODE_REMOTE_PROFILE_YJP_AGENT_LIB=()

cdepl_app_dxnet_init()
{
	local path=$1

	__DXNET_PATH="$(cdepl_cluster_login_cmd "realpath $path")"
	__DXNET_CONFIG_PATH="${__DXNET_PATH}/config/dxnet.json"
	__DXNET_LOG4J_CONFIG_PATH="${__DXNET_PATH}/config/log4j.xml"

	__DXNET_OUT_PATH="${__DEPLOY_CUR_OUT_PATH}/dxnet"
	__DXNET_OUT_CONF_PATH="${__DXNET_OUT_PATH}/conf"
	__DXNET_OUT_LOG_PATH="${__DXNET_OUT_PATH}/log"


	# Check if dxnet path is available
	if [ "$(cdepl_cluster_login_cmd "[ -d $__DXNET_PATH ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[login][dxnet]: Path does not exist: $__DXNET_PATH"
	fi

	__cdepl_app_dxnet_check
	__cdepl_app_dxnet_check_config

	# Output path setup
	cdepl_cluster_login_cmd "mkdir -p $__DXNET_OUT_CONF_PATH"
	cdepl_cluster_login_cmd "mkdir -p $__DXNET_OUT_LOG_PATH"

	util_log "[login][dxnet] Initialized: $__DXNET_PATH"
	util_log "[login][dxnet] Output: $__DXNET_OUT_PATH"
}

depl_app_dxnet_workload()
{
	local workload=$1

	if [ "$workload" -lt "0" ] || [ "$workload" -gt "3" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid workload: $workload"
	fi

	__DXNET_WORKLOAD="$workload"
}

depl_app_dxnet_msg_count()
{
	local msg_count=$1

	if [ "$msg_count" -lt "0" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid msg count: $msg_count"
	fi

	__DXNET_MSG_COUNT="$msg_count"
}

depl_app_dxnet_msg_size()
{
	local msg_size=$1

	if [ "$msg_size" -lt "0" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid msg size: $msg_size"
	fi

	__DXNET_MSG_SIZE="$msg_count"
}

cdepl_app_dxnet_node_send_threads()
{
	local node=$1
	local send_threads=$2

	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	if [ "$send_threads" -lt "0" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid send threads: $send_threads"
	fi

	__DXNET_SEND_THREADS[$node]="$send_threads"
}

cdepl_app_dxnet_node_send_targets()
{
	local node=$1
	local target_nodeids="${@:2}"

	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	__DXNET_SEND_TARGETS[$node]="$target_nodeids"
}

depl_app_dxnet_network()
{
	local network=$1

	if [ "$network" != "eth" ] && [ "$network" != "ib" ] && [ "$network" != "lb" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid network type $network for node $node"
	fi

	__DXNET_NODE_NETWORK="$network"
}

cdepl_app_dxnet_node_port()
{
	local node=$1
	local port=$2

	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	if [ "$port" -gt "65536" ] || [ "$port" -lt "0" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid port $port for node $node"
	fi

	__DXNET_NODE_PORT[$node]="$port"
}

cdepl_app_dxnet_node_message_handler()
{
	local node=$1
	local msg_handler=$2

	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	__DXNET_NODE_MSG_HANDLER[$node]="$msg_handler"
}

cdepl_app_dxnet_run_as_sudo()
{
	local node=$1

	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	__DXNET_NODE_RUN_SUDO[$node]="1"
}

cdepl_app_dxnet_remote_debug()
{
	local node=$1
	local port=$2

	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	__DXNET_NODE_REMOTE_DEBUG_PORT[$node]="$port"
}

cdepl_app_dxnet_remote_profile_yjp()
{
	local node=$1
	local port=$2
	local agent_lib=$3

	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][dxnet] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	# Check if the agent lib is available
	if [ "$(cdepl_cluster_node_cmd $node "[ -f $agent_lib ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[$node][dxnet] Could not find libyjpagent.so in $agent_lib"
	fi

	__DXNET_NODE_REMOTE_PROFILE_YJP_PORT[$node]="$port"
	__DXNET_NODE_REMOTE_PROFILE_YJP_AGENT_LIB[$node]="$agent_lib"
}

cdepl_app_dxnet_start_node()
{
	local node=$1
	local logfile=${__DXNET_OUT_LOG_PATH}/node${node}

	__cdepl_app_dxnet_resolve_default_config_values
	__cdepl_app_dxnet_create_node_base_config $node

	__cdepl_app_dxnet_start $node $logfile
}

cdepl_app_dxnet_node_wait_finished()
{
	local node=$1

	local logfile=${__DXNET_OUT_LOG_PATH}/node${node}

	util_log "[$node][dxnet] Waiting until finished..."

	while true; do
		echo -n "."

		local pid="$(cdepl_cluster_node_cmd $node "pgrep -f '^java.*${__DXNET_PROCESS_IDENTIFIER}'")"
		# Abort execution after an exception was thrown (every exception but NetworkResponseCancelledException)
		local fail_error=$(cdepl_cluster_node_cmd $node "cat $logfile 2> /dev/null | sed 's,\x1B\[[0-9;]*[a-zA-Z],,g' | grep -i 'exception' | grep -v 'NetworkResponseCancelledException'")
		# "A fatal error" -> JVM segfaults
		local fail_error2=$(cdepl_cluster_node_cmd $node "cat $logfile 2> /dev/null | sed 's,\x1B\[[0-9;]*[a-zA-Z],,g' | grep -i -e '\[ERROR\]' -e '\# A fatal error'")

		if [ "$fail_error" ] || [ "$fail_error2" ]; then
			echo ""
			util_log_error_and_exit "[$node][dxnet] Failed, error or exception. See log file $logfile"
		fi

		if [ ! "$pid" ]; then
			echo ""
			util_log "[$node][dxnet] Finished"
			break;
		fi

		sleep 1.0
	done
}

cdepl_app_dxnet_node_cleanup()
{
	local node=$1

	util_log "[$node][dxnet] Cleanup..."

	local pid="$(cdepl_cluster_node_cmd $node "pgrep -f '^java.*${__DXNET_PROCESS_IDENTIFIER}'")"

	if [ "$pid" ]; then
		# If we or someone else left some garbage processes on the node multiple
		# pids are returned
		for i in $pid; do
			local kill_out=$(cdepl_cluster_node_cmd $node "kill -9 $i 2>&1")

			if [ "$?" = "0" ] && [ ! "$kill_out" ]; then
				util_log "[$node][dxnet] Killed (pid: $i)"
			elif [ "$kill_out" ]; then
				# Probably operation not permitted, try root
				cdepl_cluster_node_cmd $node "sudo -P kill -9 $i > /dev/null 2>&1"

				if [ "$?" = "0" ]; then
					util_log "[$node][dxnet] Killed (root) (pid: $i)"
				elif [ "$?" != "1" ]; then
					util_log_warn "[$node][dxnet] Killing (root) $i failed, DXNet instance(s) might stay alive"
				fi
			elif [ "$?" != "1" ]; then
				util_log_warn "[$node][dxnet] Killing $i failed, DXNet instance(s) might stay alive"
			fi
		done
	fi
}

__cdepl_app_dxnet_check()
{
	if [ "$(cdepl_cluster_node_cmd 0 "[ -f ${__DXNET_PATH}/dxram.jar ] && echo 1")" = "1" ]; then
		__DXNET_JAR_FILE="dxram.jar"
	elif [ "$(cdepl_cluster_node_cmd 0 "[ -f ${__DXNET_PATH}/dxnet.jar ] && echo 1")" = "1" ]; then
		__DXNET_JAR_FILE="dxnet.jar"
	else
		util_log_error_and_exit "[0][dxnet] Could not find dxram.jar/dxnet.jar in $__DXNET_PATH"
	fi		
}

__cdepl_app_dxnet_check_config()
{
	# Check if config file is available and create default config
	if [ "$(cdepl_cluster_node_cmd 0 "[ -f $__DXNET_CONFIG_PATH ] && echo \"1\"")" != "1" ]; then
		util_log "[0][dxnet] No config file available, creating default config: $__DXNET_CONFIG_PATH"
		
		# Don't run this on the login node (might not have java installed)
		# Use the first actual cluster node instead
		cdepl_cluster_node_cmd 0 "cd $__DXNET_PATH && java -Dlog4j.configurationFile=$__DXNET_LOG4J_CONFIG_PATH -cp ${__DXNET_CLASS_PATH}:${__DXNET_JAR_FILE} $__DXNET_MAIN_CLASS $__DXNET_CONFIG_PATH > /dev/null 2>&1"
	
		# Sanity check
		if [ "$(cdepl_cluster_node_cmd 0 "[ -f $__DXNET_CONFIG_PATH ] && echo \"1\"")" != "1" ]; then
			util_log_error_and_exit "[0][dxnet] Creating config file $__DXNET_CONFIG_PATH failed"
		fi
	else
		local config_content="$(cdepl_cluster_node_cmd 0 "cat "$__DXNET_CONFIG_PATH"")"
		# Check if corrupted configuration file
		local core_header=`echo $config_content | grep "m_coreConfig"`
		if [ "$core_header" = "" ]; then
			util_log "[0][dxnet] Configuration file $__DXNET_CONFIG_PATH corrupted, deleting and creating default"

			# Configuration file seems to be corrupted -> start dxnet once to create new configuration
			cdepl_cluster_node_cmd 0 "rm $__DXNET_CONFIG_PATH && cd $__DXNET_PATH && java -Dlog4j.configurationFile=$__DXNET_LOG4J_CONFIG_PATH -cp ${__DXNET_CLASS_PATH}:${__DXNET_JAR_FILE} $__DXNET_MAIN_CLASS $__DXNET_CONFIG_PATH > /dev/null 2>&1"
			cdepl_cluster_node_cmd 0 "sync"
	
			# Sanity check
			if [ "$(cdepl_cluster_node_cmd 0 "[ -f $__DXNET_CONFIG_PATH ] && echo \"1\"")" != "1" ]; then
				util_log_error_and_exit "[0][dxnet] Creating config file $__DXNET_CONFIG_PATH failed"
			fi
		fi
	fi
}

__cdepl_app_dxnet_resolve_default_config_values()
{
	if [ ! "$__DXNET_WORKLOAD" ]; then
		__DXNET_WORKLOAD="0"
	fi

	if [ ! "$__DXNET_MSG_COUNT" ]; then
		__DXNET_MSG_COUNT="10000"
	fi

	if [ ! "$__DXNET_MSG_SIZE" ]; then
		__DXNET_MSG_SIZE="128"
	fi

	if [ ! "$__DXNET_NODE_NETWORK" ]; then
		__DXNET_NODE_NETWORK="eth"
	fi

	if [ ! "$__DXNET_NODE_PORT" ]; then
		__DXNET_NODE_PORT="22222"
	fi

	local node_count="$(cdepl_cluster_get_alloc_node_count)"

	for i in `seq 0 $((node_count - 1))`; do
		if [ "${__DXNET_SEND_THREADS[$i]}" = "" ]; then
			__DXNET_SEND_THREADS[$i]="1"
		fi

		if [ "${__DXNET_NODE_MSG_HANDLER[$i]}" = "" ]; then
			__DXNET_NODE_MSG_HANDLER[$i]="2"
		fi
	done
}

__cdepl_app_dxnet_create_node_base_config()
{
	local node=$1

	local node_config_path="${__DXNET_OUT_CONF_PATH}/node_${node}.conf"
	local node_config="$(cdepl_cluster_login_cmd "cat $__DXNET_CONFIG_PATH")"

	# Insert node config mappings
	# Create replacement string for nodes configuration:
	local default_node="{
		\"m_address\": {
            \"m_ip\": \"IP_TEMPLATE\",
            \"m_port\": PORT_TEMPLATE
		},
          	\"m_nodeId\": \"NODE_ID_TEMPLATE\"
	}"

	local node_config_string=""
	local first_iterartion=true

	# Create "List" of node configs for configuration file
	for i in `seq 0 $(($(cdepl_cluster_get_alloc_node_count) - 1))`; do
		local ip=""
		local port=""

		ip="$(cdepl_cluster_resolve_node_to_ip "$i")"

		if [ ! "ip" ]; then
			util_log_error_and_exit "[$node][dxnet] Could not resolve node to ip"
		fi

		port="${__DXNET_NODE_PORT[$i]}"

		local node_string=`echo "$default_node" | sed "s/IP_TEMPLATE/$ip/" | sed "s/PORT_TEMPLATE/$port/" | sed "s/NODE_ID_TEMPLATE/$i/"`

		# Separate items of list with ,
		if [ "$first_iterartion" == true ]; then
			node_config_string="${node_config_string}${node_string}"
			first_iterartion=false
		else
			node_config_string="${node_config_string},${node_string}"
		fi
	done

	# Close node config list
	node_config_string="$(echo -e "$node_config_string\n      ],")"

	# Replace nodes configuration:
	local new_config="$(echo "${node_config}" | sed '/m_nodesConfig/q')"
	new_config="${new_config}${node_config_string}"
	local end="$(echo "${node_config}" | sed -ne '/m_nodesConfig/{s///; :a' -e 'n;p;ba' -e '}')"
	end="$(echo "${end}" | sed -ne '/],/{s///; :a' -e 'n;p;ba' -e '}')"
	new_config="$(echo -e "${new_config}\n${end}")"

	# Write back new config
	cdepl_cluster_login_cmd "echo '$new_config' > '${node_config_path}'"
}

__cdepl_app_dxnet_start()
{
	local node=$1
	local logfile=$2

	local node_config_path="${__DXNET_OUT_CONF_PATH}/node_${node}.conf"

	util_log "[$node][dxnet] Starting dxnet, logfile: $logfile config: $node_config_path"

	local vm_opts=""
	
	# Required to fix JNI crashing with libIbdxnet (see JNINotes.md in ibnet repository)
	vm_opts="-XX:+UseMembar"

	vm_opts="$vm_opts -Dlog4j.configurationFile=$__DXNET_LOG4J_CONFIG_PATH"

	# Development and debugging

	local root=""
	if [ "${__DXNET_NODE_RUN_SUDO[$node]}" = "1" ]; then
		util_log "[$node][dxnet] Running with sudo"
		root="sudo -P"
	fi

	if [ "${__DXNET_NODE_REMOTE_DEBUG_PORT[$node]}" != "" ]; then
		vm_opts="$vm_opts -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${__DXNET_NODE_REMOTE_DEBUG_PORT[$node]}"
		util_log "[$node][dxnet][P] Enabled remote debugging on port ${__DXNET_NODE_REMOTE_DEBUG_PORT[$node]}"
		util_log "[$node][dxnet][P] On your local machine: establish a tunnel using 'ssh <target_hostname> -L ${__DXNET_NODE_REMOTE_DEBUG_PORT[$node]}:<target_hostname>:${__DXNET_NODE_REMOTE_DEBUG_PORT[$node]}' and connect your debugger to localhost, port ${__DXNET_NODE_REMOTE_DEBUG_PORT[$node]}"
	fi

	if [ "${__DXNET_NODE_REMOTE_PROFILE_YJP_PORT[$node]}" != "" ]; then
		vm_opts="$vm_opts -agentpath:${__DXNET_NODE_REMOTE_PROFILE_YJP_AGENT_LIB[$node]}=port=${__DXNET_NODE_REMOTE_PROFILE_YJP_PORT[$node]}"

		util_log "[$node][dxnet] On your local machine: establish a tunnel using 'ssh <target_hostname> -L ${__DXNET_NODE_REMOTE_PROFILE_YJP_PORT[$node]}:<target_hostname>:${__DXNET_NODE_REMOTE_PROFILE_YJP_PORT[$node]}' and connect with yourkit using 'Connect to remote application' with the arguments 'localhost:${__DXNET_NODE_REMOTE_PROFILE_YJP_PORT[$node]}'"
	fi

	local args="$node_config_path $__DXNET_WORKLOAD $__DXNET_MSG_COUNT $__DXNET_MSG_SIZE ${__DXNET_SEND_THREADS[$node]} $node ${__DXNET_SEND_TARGETS[$node]}"

	# Don't use && instead of ;
	# This will hang if the ssh with controlmaster and nohup is used
	cdepl_cluster_node_cmd $node "cd $__DXNET_PATH ; $root nohup java -D${__DXNET_PROCESS_IDENTIFIER} $vm_opts -cp ${__DXNET_CLASS_PATH}:${__DXNET_JAR_FILE} $__DXNET_MAIN_CLASS $args > $logfile 2>&1 &"
}