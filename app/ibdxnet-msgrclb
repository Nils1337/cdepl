#!/bin/bash

#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# Include guard
if [ "$__CDEPL_APP_IBDXNET_MSGRC_INCLUDED" ]; then
    return
fi

__CDEPL_APP_IBDXNET_MSGRC_INCLUDED="1"

readonly __IBDXNET_MSGRCLB_EXEC="MsgrcLoopback"
readonly __IBDXNET_MSGRCLB_REQUIRED_ENVIRONMENT="gcc/6.1"

__IBDXNET_MSGRCLB_PATH=""
__IBDXNET_MSGRCLB_OUT_PATH=""
__IBDXNET_MSGRCLB_OUT_LOG_PATH=""

__IBDXNET_MSGRCLB_TOTAL_NODES=""

__IBDXNET_MSGRCLB_SEND_TARGETS=()
__IBDXNET_MSGRCLB_NODE_LIST=()
__IBDXNET_MSGRCLB_NODE_RUN_SUDO=()

##
# Initialize and setup ibdxnet msgrclb environment. This must be called before
# any other function of the ibdxnet-msgrclb module.
#
# $1 Path to the ibdxnet folder with the build output in build/bin
# $2 Number of nodes of allocation actually used
##
cdepl_app_ibdxnet_msgrclb_init()
{
	local path=$1
	local total_nodes=$2

	if [ "$total_nodes" -gt "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[ibdxnet-msgrclb] Can't use more nodes ($total_nodes) than available/allocated $(cdepl_cluster_get_alloc_node_count)"
	fi

	__IBDXNET_MSGRCLB_PATH="$(cdepl_cluster_node_cmd 0 "readlink -f $path")"
	__IBDXNET_MSGRCLB_TOTAL_NODES="$total_nodes"

	__IBDXNET_MSGRCLB_OUT_PATH="$(cdepl_run_get_cur_out_path)/ibdxnet-msgrclb"
	__IBDXNET_MSGRCLB_OUT_LOG_PATH="${__IBDXNET_MSGRCLB_OUT_PATH}/log"

	# Check if path is available
	if [ ! "$__IBDXNET_MSGRCLB_PATH" ] || [ "$(cdepl_cluster_file_system_cmd "[ -d $__IBDXNET_MSGRCLB_PATH ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[ibdxnet-msgrclb]: Path does not exist ($path), resolved path: $__IBDXNET_MSGRCLB_PATH"
	fi

    if [ "$(cdepl_cluster_file_system_cmd "[ -f ${__IBDXNET_MSGRCLB_PATH}/${__IBDXNET_MSGRCLB_EXEC} ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[ibdxnet-msgrclb]: Could not find executable in path: $__IBDXNET_MSGRCLB_PATH"
	fi

	# Output path setup
	cdepl_cluster_file_system_cmd "mkdir -p $__IBDXNET_MSGRCLB_OUT_LOG_PATH"

	util_log "[ibdxnet-msgrclb] Initialized: $__IBDXNET_MSGRCLB_PATH"
	util_log "[ibdxnet-msgrclb] Output: $__IBDXNET_MSGRCLB_OUT_PATH"
}

##
# Set the target nodes to send data to. Use this to create send/communication
# patterns like point-to-point, one-to-all, all-to-all etc.
#
# $1 node Target node id
# $2 target_nodeids A sequence of node ids this node has to send messages to
#    e.g. send to nodes 2 and 3 for nodes 0-3: 2 3
##
cdepl_app_ibdxnet_msgrclb_send_targets()
{
    local node=$1
	local target_nodeids="${@:2}"

	if [ "$node" -ge "$__IBDXNET_MSGRCLB_TOTAL_NODES" ]; then
		util_log_error_and_exit "[$node][ibdxnet-msgrclb] Invalid node id $node > $__IBDXNET_MSGRCLB_TOTAL_NODES"
	fi

	__IBDXNET_MSGRCLB_SEND_TARGETS[$node]="$target_nodeids"
}

##
# Set the node list for the target node to discover and be able to connect to.
# Even if you don't want to send to any other nodes, the node has to know
# which other nodes are available to be able to create a connection and
# receive data from them.
#
# $1 node Target node id
# $2 target_nodeids A sequence of node ids e.g. nodes 2 and 3: 2 3
##
cdepl_app_ibdxnet_msgrclb_node_list()
{
    local node=$1
	local nodeids="${@:2}"

	if [ "$node" -ge "$__IBDXNET_MSGRCLB_TOTAL_NODES" ]; then
		util_log_error_and_exit "[$node][ibdxnet-msgrclb] Invalid node id $node > $__IBDXNET_MSGRCLB_TOTAL_NODES"
	fi

	__IBDXNET_MSGRCLB_NODE_LIST[$node]="$nodeids"
}

##
# Run the application as superuser on the target node. Depending on the cluster
# and environment setup, this might be necessary for things like InfiniBand to
# allow memory pinning.
#
# $1 node Target node id
##
cdepl_app_ibdxnet_msgrclb_run_as_sudo()
{
	local node=$1

	if [ "$node" -ge "$__IBDXNET_MSGRCLB_TOTAL_NODES" ]; then
		util_log_error_and_exit "[$node][ibdxnet-msgrclb] Invalid node id $node > $__IBDXNET_MSGRCLB_TOTAL_NODES"
	fi

	if [ "$(cdepl_cluster_allows_sudo)" ]; then
		__IBDXNET_MSGRCLB_NODE_RUN_SUDO[$node]="1"
	else
		util_log_warn "[$node][ibdxnet-msgrclb] Cluster type does not allow running commands as sudo, ignored"
	fi
}

##
# Start a MsgrcLoopback instance on the target node.
#
# $1 Target node id (or start node id of range if second parameter provided)
# $2 Optional: Node id range end (including) and first parameter is interpreted
#    as range start (including)
##
cdepl_app_ibdxnet_msgrclb_start_node()
{
	local node_range_start=$1
	local node_range_end=$2

	if [ "$node_range_end" ]; then
		local counter=0
		local pids=""

		for node in $(seq $node_range_start $node_range_end); do
			__cdepl_app_ibdxnet_msgrclb_start_node $node &
			pids="$pids $!"
		
			counter=$((counter + 1))

			# Parallel deploy in batches of 10 which is the default limit
			# for parallel connections on ssh servers, stay slightly below 
			# this limit (sometimes, 10 causes errors on multiplexing)
			if [ "$counter" -ge "8" ]; then
				wait $pids
				pids=""
				counter=0
			fi
		done

		wait $pids
	else
		__cdepl_app_ibdxnet_msgrclb_start_node $node_range_start
	fi
}

##
# Cleanup any still running or remaining/crashed instances on the target node
#
# $1 Target node id (or start node id of range if second parameter provided)
# $2 Optional: Node id range end (including) and first parameter is interpreted
#    as range start (including)
##
cdepl_app_ibdxnet_msgrclb_node_cleanup()
{
	local node_range_start=$1
	local node_range_end=$2

	if [ "$node_range_end" ]; then
		local pids=""

		for node in $(seq $node_range_start $node_range_end); do
			__cdepl_app_ibdxnet_msgrclb_node_cleanup $node &
			pids="$pids $!"
		done

		wait $pids
	else
		__cdepl_app_ibdxnet_msgrclb_node_cleanup $node_range_start
	fi
}

__cdepl_app_ibdxnet_msgrclb_start_node()
{
    local node=$1

    local logfile=${__IBDXNET_MSGRCLB_OUT_LOG_PATH}/node${node}

    util_log "[$node][ibdxnet-msgrclb] Starting ibdxnet-msgrclb, logfile: $logfile"

    local root=""

	if [ "${__IBDXNET_MSGRCLB_NODE_RUN_SUDO[$node]}" = "1" ]; then
		util_log "[$node][idxbnet-msgrclb] Running with sudo"
		root="sudo -P"
	fi

    local args=""
    local first="1"

    args="-n $node"

    for i in ${__IBDXNET_MSGRCLB_NODE_LIST[$node]}; do
        if [ "$first" ]; then
            first=""
            args="${args} -c $(cdepl_cluster_node_resolve_node_to_hostname $i)"
        else
            args="${args},$(cdepl_cluster_node_resolve_node_to_hostname $i)"
        fi
    done

    first="1"

    for i in ${__IBDXNET_MSGRCLB_SEND_TARGETS[$node]}; do
        if [ "$i" ]; then
            if [ "$first" ]; then
                first=""
                args="${args} -d ${i}"
            else
                args="${args},${i}"
            fi
        fi
    done

    args="${args} -u 1000"

    # Don't use && instead of ;
	# This will hang if the ssh with controlmaster and nohup is used
	cdepl_cluster_node_cmd $node "cd $__IBDXNET_MSGRCLB_PATH ; $root nohup ./${__IBDXNET_MSGRCLB_EXEC} $args > $logfile 2>&1 &" "$__IBDXNET_MSGRCLB_REQUIRED_ENVIRONMENT"
}

__cdepl_app_ibdxnet_msgrclb_node_cleanup()
{
	local node=$1

	util_log "[$node][ibdxnet-msgrclb] Cleanup..."

	local pid="$(cdepl_cluster_node_cmd $node "pgrep $__IBDXNET_MSGRCLB_EXEC")"

	if [ "$pid" ]; then
		# If we or someone else left some garbage processes on the node multiple
		# pids are returned
		for i in $pid; do
			local kill_out=$(cdepl_cluster_node_cmd $node "kill -9 $i 2>&1")

			if [ "$?" = "0" ] && [ ! "$kill_out" ]; then
				util_log "[$node][ibdxnet-msgrclb] Killed (pid: $i)"
			elif [ "$kill_out" ]; then
				# Probably operation not permitted, try root
				cdepl_cluster_node_cmd $node "sudo -P kill -9 $i > /dev/null 2>&1"

				if [ "$?" = "0" ]; then
					util_log "[$node][ibdxnet-msgrclb] Killed (root) (pid: $i)"
				elif [ "$?" != "1" ]; then
					util_log_warn "[$node][ibdxnet-msgrclb] Killing (root) $i failed, MsgrcLoopback instance(s) might stay alive"
				fi
			elif [ "$?" != "1" ]; then
				util_log_warn "[$node][ibdxnet-msgrclb] Killing $i failed, MsgrcLoopback instance(s) might stay alive"
			fi
		done
	fi
}