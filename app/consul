#!/bin/bash

#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# Include guard
if [ "$__CDEPL_APP_CONSUL_INCLUDED" ]; then
    return
fi

__CDEPL_APP_CONSUL_INCLUDED="1"

__CONSUL_PATH=""
__CONSUL_OUT_PATH=""
__CONSUL_GUI_ENABLED=""
__CONSUL_BOOTSTRAP_NODE=""

readonly __CONSUL_LOG_FILE_POSTFIX="_server"
readonly __CONSUL_LOG_FILE_CLIENT_POSTFIX="_client"
readonly __CONSUL_DATA_DIR="/tmp/consul"
readonly __CONSUL_GUI_ENABLED_DEFAULT="false"

cdepl_app_consul_init()
{
	local path=$1

	__CONSUL_PATH="$(cdepl_cluster_node_cmd 0 "readlink -f $path")"
	__CONSUL_OUT_PATH="$(cdepl_run_get_cur_out_path)/consul"

	if [ ! "$__CONSUL_PATH" ] || [ "$(cdepl_cluster_file_system_cmd "[ -d $__CONSUL_PATH ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[consul]: Path does not exist ($path), resolved path: $__CONSUL_PATH"
	fi

	util_log "[consul] Initialized: $__CONSUL_PATH"
	util_log "[consul] Output: $__CONSUL_OUT_PATH"
}

##
# Start consul instances on the target nodes.
#
# $1 id1 Node id range start
# $2 id2 Node id range end
##
cdepl_app_consul_start()
{
	local node_range_start=$1
	local node_range_end=$2

	if [ "$node_range_end" ]; then
		local pids=""

		for node in $(seq "$node_range_start" "$node_range_end"); do
			__cdepl_app_consul_start "$node" "$port" &
			pids="$pids $!"
		done

		wait $pids
	else
		__cdepl_app_consul_start "$node_range_start" "$port"
    fi
}

##
# Start a consul (server) instance on the target node.
#
# $1 node node id
##
__cdepl_app_consul_start()
{
	local node=$1
	local ip="$(cdepl_cluster_resolve_node_to_ip ${node})"

    local param_gui=""

	local logfile=${__CONSUL_OUT_PATH}/node${node}${__CONSUL_LOG_FILE_POSTFIX}

    __cdepl_app_consul_resolve_default_config_values

    if [ "${__CONSUL_BOOTSTRAP_NODE}" = "" ]; then
        util_log_error_and_exit "[$node][consul] No Consul bootstrap node specified"
    fi

	# Delete Consul's previous data directory
	util_log "[$node][consul] Deleting consul data directory"
	cdepl_cluster_node_cmd "$node" "rm -rf $__CONSUL_DATA_DIR"
	
	util_log "[$node][consul] Starting, logfile: $logfile"

	cdepl_cluster_node_cmd $node "mkdir -p $__CONSUL_OUT_PATH"

    if [ "${__CONSUL_BOOTSTRAP_NODE}" = "$node" ]; then
        cdepl_cluster_node_cmd $node "nohup ${__CONSUL_PATH}/consul agent -server -bootstrap -client=$ip -data-dir=${__CONSUL_DATA_DIR} >> $logfile 2>&1 &"
    else
        local bootstrap_ip="$(cdepl_cluster_resolve_node_to_ip ${__CONSUL_BOOTSTRAP_NODE})"
        util_log $__CONSUL_BOOTSTRAP_NODE
        cdepl_cluster_node_cmd $node "nohup ${__CONSUL_PATH}/consul agent -join $bootstrap_ip -client=$ip -data-dir=${__CONSUL_DATA_DIR} >> $logfile 2>&1 &"
    fi
    
	if [ "$?" != "0" ]; then
		util_log_error_and_exit "[$node][consul] Starting failed, also check logfile $logfile"
	fi
}

##
# Wait for zookeeper (server) instances to be started
#
# $1 id1 Node id with started zookeeper instance range start
# $2 id2 Node id range end
##
cdepl_app_consul_wait_started()
{
	local node_range_start=$1
	local node_range_end=$2

	if [ "$node_range_end" ]; then
		local pids=""

		for node in $(seq "$node_range_start" "$node_range_end"); do
			__cdepl_app_consul_wait_started "$node" &
			pids="$pids $!"
		done

		wait $pids
	else
		__cdepl_app_consul_wait_started "$node_range_start"
	fi
}

##
# Wait for a started consul (server) instance to be started
#
# $1 node Target node id with started consul (server) instance
##
__cdepl_app_consul_wait_started()
{
	local node=$1

	local logfile=${__CONSUL_OUT_PATH}/node${node}${__CONSUL_LOG_FILE_POSTFIX}
	local logfile_client=${__CONSUL_OUT_PATH}/node${node}${__CONSUL_LOG_FILE_CLIENT_POSTFIX}

	util_log "[$node][consul] Waiting for startup"

	while true; do
		echo -n "."

		local success_started=$(cdepl_cluster_node_cmd $node "cat "$logfile" 2> /dev/null | grep 'Starting Consul agent'")
		local success_running=$(cdepl_cluster_node_cmd $node "cat "$logfile" 2> /dev/null | grep 'Consul agent running!'")
		local fail_file=$(cdepl_cluster_node_cmd $node "cat "$logfile" 2> /dev/null | grep 'No such file or directory'")
		local fail_pid=$(cdepl_cluster_node_cmd $node "cat "$logfile" 2> /dev/null | grep 'FAILED TO WRITE PID'")
		local fail_started=$(cdepl_cluster_node_cmd $node "cat "$logfile" 2> /dev/null | grep 'SERVER DID NOT START'")

		if [ "$success_started" != "" ] || [ "$success_running" != "" ]; then
			local pid=$(cdepl_cluster_node_cmd $node "pgrep -f 'consul'")

			echo ""

			if [ "$pid" = "" ]; then
				util_log_error_and_exit "[$node][consul] Could not find started process"
			fi

			util_log "[$node][consul] Started (pid: $pid)"

			break
		elif [ "$fail_file" != "" -o "$fail_pid" != "" -o "$fail_started" != "" ] ; then
			echo ""
			util_log_error_and_exit "[$node][consul] Could not be started. See log file $logfile"
		fi

		sleep 1.0
	done
}

##
# Cleanup any still running or remaining/crashed instances on the target node
#
# $1 Target node id (or start node id of range if second parameter provided)
# $2 Optional: Node id range end (including) and first parameter is interpreted
#    as range start (including)
##
cdepl_app_consul_cleanup()
{
	local node_range_start=$1
	local node_range_end=$2

	if [ "$node_range_end" ]; then
		local pids=""

		for node in $(seq $node_range_start $node_range_end); do
			__cdepl_app_consul_cleanup $node &
			pids="$pids $!"
		done

		wait $pids
	else
		__cdepl_app_consul_cleanup $node_range_start
	fi
}

##
# Sets the consul bootstrap node.
#
# $1 node Target node id
##
cdepl_app_consul_set_bootstrap_node()
{
	local node=$1

    __CONSUL_BOOTSTRAP_NODE="$node"
}

__cdepl_app_consul_get_instance_running_pid()
{
	local node=$1

	echo "$(cdepl_cluster_node_cmd $node "pgrep -f 'consul'")"
}

__cdepl_app_consul_cleanup()
{
	local node=$1

	util_log "[$node][consul] Cleanup..."

	local pid=$(cdepl_cluster_node_cmd $node "pgrep -f 'consul'")

	if [ "$pid" != "" ]; then
		cdepl_cluster_node_cmd $node "kill -9 $pid > /dev/null 2>&1"

		if [ "$?" != "0" ]; then
			util_log_warn "[$node][consul] Killing $pid failed, consul might stay alive"
		else
			util_log "[$node][consul] Killed (pid: $pid)"
		fi
	fi
}

__cdepl_app_consul_resolve_default_config_values()
{
    if [ "${__CONSUL_GUI_ENABLED}" = "" ]; then
        __CONSUL_GUI_ENABLED="$__CONSUL_GUI_ENABLED_DEFAULT"
    fi
}