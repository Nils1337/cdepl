#!/bin/bash

#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# Include guard
if [ "$__CDEPL_APP_AEROSPIKE_INCLUDED" ]; then
    return
fi

__CDEPL_APP_AEROSPIKE_INCLUDED="1"

__AEROSPIKE_PATH=""
__AEROSPIKE_OUT_PATH=""
__AEROSPIKE_EXECUTABLE=""
__AEROSPIKE_USER=""
__AEROSPIKE_GROUP=""

##
# Initialize and setup Aerospike environment. This must be called before any other
# function of the Aerospike module.
#
# $1 Path to folder containing build output of Aerospike
# $2 Name of the user, that executes Aerospike
# $3 Name of the user-group, that Aerospike will be executed in
##
cdepl_app_aerospike_init()
{
	local aerospike_path=$1
	__AEROSPIKE_USER=$2
	__AEROSPIKE_GROUP=$3

	__AEROSPIKE_PATH="$(cdepl_cluster_file_system_cmd "realpath ${aerospike_path}")"
	__AEROSPIKE_OUT_PATH="$(cdepl_run_get_cur_out_path)"
	__AEROSPIKE_EXECUTABLE="${__AEROSPIKE_PATH}/bin/asd"

	if [ ! "$__AEROSPIKE_PATH" ] || [ "$(cdepl_cluster_file_system_cmd "[ -d ${__AEROSPIKE_PATH} ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[aerospike]: Path does not exist: ${__AEROSPIKE_PATH}"
	fi
	
	if [ "$(cdepl_cluster_file_system_cmd "[ -f ${__AEROSPIKE_EXECUTABLE} ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[aerospike]: File does not exist ($path), resolved path: ${__AEROSPIKE_EXECUTABLE}"
	fi

	__cdepl_app_aerospike_setup_out_dir

	util_log "[aerospike] Initialized: ${__AEROSPIKE_PATH}"
	util_log "[aerospike] Output: ${__AEROSPIKE_OUT_PATH}"
}

##
# Start Aerospike on a specified node
#
# $1 The node-number
##
cdepl_app_aerospike_start_node()
{	
	local node=$1

	local user=$(cdepl_cluster_file_system_cmd "whoami")
	local log_path="${__AEROSPIKE_OUT_PATH}/log/node${node}"

	if [[ ${user} != "root" ]]; then
		util_log_warn "[$node][aerospike] Running without super-user privileges! Setting system variables might fail..."
		cdepl_cluster_node_cmd $node "ulimit -Sn 100000" > /dev/null 2>&1
	else
		util_log "[$node][aerospike] Setting up system variables"
		cdepl_cluster_node_cmd $node "ulimit -Hn 100000" > /dev/null 2>&1
	fi

	if [ ! $? -eq 0 ]; then
		util_log_warn "[$node][aerospike] Failed to set file-descriptor limit! Using current limit ($(cdepl_cluster_node_cmd $node 'ulimit -n'))..."
	fi

	__cdepl_app_aerospike_set_shmall $node
	__cdepl_app_aerospike_set_shmmax $node
	__cdepl_app_aerospike_set_socket_buffer_limits $node

	util_log "[$node][aerospike] Starting Aerospike..."
	cdepl_cluster_node_cmd $node "${__AEROSPIKE_EXECUTABLE} --instance 1 --config '${__AEROSPIKE_OUT_PATH}/conf/node${node}.conf' &>'${log_path}/console.log'"

	local console=$(cdepl_cluster_node_cmd $node "cat \"${log_path}/console.log\"")
	
	if [ $? -eq 0 ] && [ -z "${console}" ]; then
		util_log "[$node][aerospike] Successfully started Aerospike!"
	else
		util_log_error "[$node][aerospike] Start failed due to an error!"
		util_log_error_and_exit "${console}"
	fi
}

##
# Wait for Aerospike to finish initializing on a specified node
#
# $1 The node-number
##
cdepl_app_aerospike_wait_finished()
{
	local node=$1

	local log_path="${__AEROSPIKE_OUT_PATH}/log/node${node}"
	local ready=$(cdepl_cluster_node_cmd $node "cat '${log_path}/aerospike.log' | grep 'service ready: soon there will be cake!'")
	local i=0

	while [ -z "$ready" ]; do
		if [ "$i" -gt "29" ]; then
			util_log_error_and_exit "[$node][aerospike] Aerospike did not finish initializing after 30 seconds! Cleaning up node..."
		fi

		sleep 1s

		ready=$(cdepl_cluster_node_cmd $node "cat '${log_path}/aerospike.log' | grep 'service ready: soon there will be cake!'")
		i=$((i + 1))
	done
}

##
# Stop Aerospike on a specified node
#
# $1 The node-number
##
cdepl_app_aerospike_node_cleanup()
{
	local node=$1

	cdepl_cluster_node_cmd $node "pkill -9 asd"
}

##
# Initializes ${__AEROSPIKE_OUT_PATH}/
##
__cdepl_app_aerospike_setup_out_dir()
{
	local node_count="$(cdepl_cluster_file_system_cmd "wc -l < \"${__AEROSPIKE_OUT_PATH}/node_mappings\"")"

	# Initialize log-directory
	for i in `seq 0 $(($node_count-1))`; do
		local log_path="${__AEROSPIKE_OUT_PATH}/log/node${i}"

		if [ "$(cdepl_cluster_file_system_cmd "[ -d ${log_path} ] && echo \"1\"")" != "1" ]; then
			cdepl_cluster_file_system_cmd "mkdir -p \"${log_path}\""
		fi
	done

	# Initialize config-directory
	if [ "$(cdepl_cluster_file_system_cmd "[ -d ${__AEROSPIKE_OUT_PATH}/conf ] && echo \"1\"")" != "1" ]; then
		cdepl_cluster_file_system_cmd "mkdir \"${__AEROSPIKE_OUT_PATH}/conf\""
	fi

	for i in `seq 0 $(($node_count-1))`; do
		__cdepl_app_aerospike_create_default_config $i
	done

	# Initialize var-directory
	for i in `seq 0 $(($node_count-1))`; do
		local var_path="${__AEROSPIKE_OUT_PATH}/var/node${i}"

		if [ "$(cdepl_cluster_file_system_cmd "[ -d ${var_path} ] && echo \"1\"")" != "1" ]; then
			cdepl_cluster_file_system_cmd "mkdir -p \"${var_path}\""
		fi

		if [ "$(cdepl_cluster_file_system_cmd "[ -d ${var_path}/run ] && echo \"1\"")" != "1" ]; then
			cdepl_cluster_file_system_cmd "mkdir \"${var_path}/run\""
		fi

		if [ "$(cdepl_cluster_file_system_cmd "[ -d ${var_path}/smd ] && echo \"1\"")" != "1" ]; then
			cdepl_cluster_file_system_cmd "mkdir \"${var_path}/smd\""
		fi

		if [ "$(cdepl_cluster_file_system_cmd "[ -d ${var_path}/udf ] && echo \"1\"")" != "1" ]; then
			cdepl_cluster_file_system_cmd "mkdir \"${var_path}/udf\""
		fi

		if [ "$(cdepl_cluster_file_system_cmd "[ -d ${var_path}/var/udf/lua ] && echo \"1\"")" != "1" ]; then
			cdepl_cluster_file_system_cmd "mkdir \"${var_path}/udf/lua\""
		fi
	done
}

##
# Creates the default aerospike.conf
# This would usually be done the python-script "render.py",
# which is part of Aerospike's startup-scripts.
#
# $1 The node-number
##
__cdepl_app_aerospike_create_default_config()
{
	local node=$1

	local user=$__AEROSPIKE_USER
	local group=$__AEROSPIKE_GROUP
	local home=$__AEROSPIKE_PATH
	local log_path="${__AEROSPIKE_OUT_PATH}/log/node${node}"
	local var_path="${__AEROSPIKE_OUT_PATH}/var/node${node}"

	local config_string="\
	# Aerospike database configuration file.\n\n \
	# This stanza must come first.\n
	service {\n \
		user ${user}\n \
		group ${group}\n \
		paxos-single-replica-limit 1 # Number of nodes where the replica count is automatically reduced to 1.\n \
		pidfile ${var_path}/run/aerospike.pid\n \
		proto-fd-max $(ulimit -n)\n \
		work-directory ${var_path}\n \
	}\n\n \
	logging {\n \
		# Log file must be an absolute path.\n \
		file ${log_path}/aerospike.log {\n \
			context any info\n \
		}\n \
	}\n\n \
	mod-lua {\n \
		system-path ${__AEROSPIKE_PATH}/share/udf/lua\n \
		user-path ${var_path}/udf/lua\n \
	}\n\n \
	network {\n \
		service {\n \
			address any\n \
			port 3000\n \
		}\n\n \
		heartbeat {\n \
			mode multicast\n \
			multicast-group 239.1.99.222\n \
			port 9918\n\n \
			interval 150\n \
			timeout 10\n \
		}\n\n \
		fabric {\n \
			port 3001\n \
		}\n\n \
		info {\n \
			port 3003\n \
		}\n \
	}\n\n \
	namespace test {\n \
		replication-factor 2\n \
		memory-size 4G\n \
		default-ttl 30d # 30 days, use 0 to never expire/evict.\n \
		storage-engine memory\n \
	}"
	
	cdepl_cluster_node_cmd 0 "echo -e '$config_string' > '${__AEROSPIKE_OUT_PATH}/conf/node${node}.conf'"
}

##
# Sets the SHMALL-value.
#
# $1 The node-number
##
__cdepl_app_aerospike_set_shmall()
{
	local node=$1

	local mem=$(cdepl_cluster_node_cmd $node "/sbin/sysctl -n kernel.shmall")
	local min=4294967296

	if [ ${#mem} -le ${#min} ]; then
		if [ $mem -lt $min ]; then
			util_log_info "kernel.shmall too low, setting to 4G pages"
			cdepl_cluster_node_cmd $node "/sbin/sysctl -w kernel.shmall=${min}" > /dev/null 2>&1

			if [ ! $? -eq 0 ]; then
				util_log_warn "[$node][aerospike] Failed to set kernel.shmall!"
			fi
		fi
	fi
}

##
# Sets the SHMMAX-value.
#
# $1 The node-number
##
__cdepl_app_aerospike_set_shmmax()
{
	local node=$1

	local mem=$(cdepl_cluster_node_cmd $node "/sbin/sysctl -n kernel.shmmax")
	local min=1073741824
	
	if [ ${#mem} -le ${#min} ]; then
		if [ $mem -lt $min ]; then
			util_log_info "kernel.shmmax too low, setting to 1GB"
			cdepl_cluster_node_cmd $node "/sbin/sysctl -w kernel.shmmax=${min}" > /dev/null 2>&1

			if [ ! $? -eq 0 ]; then
				util_log_warn "[$node][aerospike] Failed to set kernel.shmmax!"
			fi
		fi
	fi
}

##
# Helper-function for __cdepl_app_aerospike_set_socket_buffer_limits.
##
__cdepl_app_aerospike_set_socket_buffer_limit()
{
	local node=$1
	local name=$2
	local path=$3
	local size=$4
	
	local curr=$(cdepl_cluster_node_cmd $node "cat ${path} 2>/dev/null")

	if [ -z $curr ]; then
		util_log_warn "[$node][aerospike] Failed to set TCP-${name}-buffer size! File not found: ${path}"
		return
	fi

	if [ ${curr} -lt ${size} ]; then
		cdepl_cluster_node_cmd $node "echo ${size} > ${path}"

		if [ ! $? -eq 0 ]; then
			util_log_warn "[$node][aerospike] Failed to set TCP-${name}-buffer size!"
		fi
	fi
}

##
# Increases the buffer limit of incoming and outgoing TCP-Buffers.
##
__cdepl_app_aerospike_set_socket_buffer_limits()
{
	local node=$1

	__cdepl_app_aerospike_set_socket_buffer_limit $node "read" "/proc/sys/net/core/rmem_max" 15728640
	__cdepl_app_aerospike_set_socket_buffer_limit $node "write" "/proc/sys/net/core/wmem_max" 5242880
}