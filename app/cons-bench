#!/usr/bin/env bash

__BENCH_DIR=""
__BENCH_OUT_DIR=""
__BENCH_OUT_LOG_DIR=""
__BENCH_OUT_RESULT_DIR=""
__BENCH_CONSENSUS_IMPL=""
__BENCH_ITERATION_COUNT=""
__BENCH_THREAD_COUNT=""
__BENCH_WRITE_DISTRIBUTION=""
__BENCH_READ_PERCENTAGE=""
__SERVER_LIST_OR_CONFIG_PATH=""

__BENCH_VERSION="1.0-SNAPSHOT"

cdepl_app_cons_bench_init() {
    local path=$1

#	__DXRAFT_DIR="$(cdepl_cluster_node_cmd 0 "readlink -f $path")"
    __BENCH_DIR=$1
	__BENCH_OUT_DIR="$(cdepl_run_get_cur_out_path)/cons-bench"
	__BENCH_OUT_LOG_DIR="${__BENCH_OUT_DIR}/log"
    __BENCH_OUT_RESULT_DIR="${__BENCH_OUT_DIR}/results"
    __BENCH_CONSENSUS_IMPL=$2
    __BENCH_THREAD_COUNT=$3
    __BENCH_WRITE_DISTRIBUTION=$4
    __BENCH_ITERATION_COUNT=$5
    __BENCH_READ_PERCENTAGE=$6
    __SERVER_LIST_OR_CONFIG_PATH=$7


	# Output path setup
	cdepl_cluster_file_system_cmd "mkdir -p $__BENCH_OUT_LOG_DIR"
	cdepl_cluster_file_system_cmd "mkdir -p $__BENCH_OUT_RESULT_DIR"

    util_log "[cons-bench] Initialized: $__BENCH_DIR"
	util_log "[cons-bench] Output: $__BENCH_OUT_LOG_DIR"
}

cdepl_app_cons_bench_start()
{
	local node_range_start=$1
	local node_range_end=$2

	if [ "$node_range_end" ]; then
		local pids=""

		for node in $(seq "$node_range_start" "$node_range_end"); do
			if [ "$node" = "$node_range_start" ] ; then
			    __cdepl_app_cons_bench_start "$node" &
			else
			    __cdepl_app_cons_bench_start "$node" &
			fi
			pids="$pids $!"
		done

		wait $pids
	else
		__cdepl_app_cons_bench_start "$node_range_start"
	fi
}

cdepl_app_cons_bench_wait_finished()
{
	local node_range_start=$1
	local node_range_end=$2

	if [ "$node_range_end" ]; then
		local pids=""

		for node in $(seq "$node_range_start" "$node_range_end"); do
			__cdepl_app_cons_bench_wait_finished "$node" &
			pids="$pids $!"
		done

		wait $pids
	else
		__cdepl_app_cons_bench_wait_finished "$node_range_start"
	fi
}

cdepl_app_cons_bench_download_results()
{
    local node_

}

cdepl_app_cons_bench_cleanup()
{
	local node_range_start=$1
	local node_range_end=$2

	if [ "$node_range_end" ]; then
		local pids=""

		for node in $(seq "$node_range_start" "$node_range_end"); do
			__cdepl_app_cons_bench_cleanup "$node" &
			pids="$pids $!"
		done

		wait $pids
	else
		__cdepl_app_cons_bench_cleanup "$node_range_start"
	fi
}

__cdepl_app_cons_bench_download_results()
{
    local local_path=$1
    util_log "[cons-bench] Downloading results to \"$1\""

    cdepl_cluster_download_from_remote "$(cdepl_run_get_cur_out_path)" "$local_path" true

    util_log "[cons-bench] Download finished"
}

__cdepl_app_cons_bench_wait_finished()
{
	local node=$1

	local logfile="${__BENCH_OUT_LOG_DIR}/server-$node.log"

	util_log "[$node][cons-bench] Waiting for finish"
	local pid
	local time=0
	while true; do
		echo -n "."

		local finished=$(cdepl_cluster_node_cmd "$node" "cat '$logfile' | grep 'Finished'")
		local failed=$(cdepl_cluster_node_cmd "$node" "cat '$logfile' | grep 'ERROR'")

		if [ "$finished" != "" ]; then
			util_log "[$node][cons-bench] Benchmark finished"
			return
		elif [ "$failed" != "" ] ; then
			echo ""
			util_log_error "[$node][cons-bench] Benchmark failed. See log file $logfile"
			return
		fi

		sleep 3.0
	done
}

__cdepl_app_cons_bench_start()
{
    local node=$1
    local ip=$(cdepl_cluster_resolve_node_to_ip "$1")

    local logfile="$__BENCH_OUT_LOG_DIR/bench-$node.log"
    local cmd="nohup java"

    if [ $__BENCH_CONSENSUS_IMPL == "zookeeper" ] ; then
        cmd="$cmd -Dzookeeper.servers=$__SERVER_LIST_OR_CONFIG_PATH"
    elif [ $__BENCH_CONSENSUS_IMPL == "consul" ] ; then
        cmd="$cmd -Dconsul.servers=$__SERVER_LIST_OR_CONFIG_PATH"
	else
        cmd="$cmd -Ddxraft.config=$__SERVER_LIST_OR_CONFIG_PATH"
    fi

    cmd="$cmd -Dbench.result=$__BENCH_OUT_RESULT_DIR/result-$node.csv"
    cmd="$cmd -jar $__BENCH_DIR/build/libs/cons-bench-$__BENCH_VERSION.jar $__BENCH_CONSENSUS_IMPL $__BENCH_THREAD_COUNT $__BENCH_WRITE_DISTRIBUTION $__BENCH_ITERATION_COUNT $__BENCH_READ_PERCENTAGE"
	cmd="$cmd > $logfile 2>&1 &"

	util_log "[$node][cons-bench] Starting benchmark: cmd=$cmd"

    cdepl_cluster_node_cmd "$node" "$cmd"
}

__cdepl_app_cons_bench_get_instances_pids()
{
	local node=$1

	cdepl_cluster_node_cmd "$node" "pgrep -f 'java.*-jar.*cons-bench-$__BENCH_VERSION.jar'"
}

__cdepl_app_cons_bench_cleanup()
{
	local node=$1

	util_log "[$node][cons-bench] Cleanup..."

	local pid=$(__cdepl_app_cons_bench_get_instances_pids "$node")

	if [ "$pid" ]; then
		util_log "Instance found on node $node"
		# If we or someone else left some garbage processes on the node multiple
		# pids are returned
		for i in $pid; do
			local kill_out=$(cdepl_cluster_node_cmd "$node" "kill -9 $i 2>&1")

			if [ "$?" = "0" ] && [ ! "$kill_out" ]; then
				util_log "[$node][cons-bench] Killed (pid: $i)"
			elif [ "$kill_out" ]; then
				# Probably operation not permitted, try root
				cdepl_cluster_node_cmd "$node" "sudo -P kill -9 $i > /dev/null 2>&1"

				if [ "$?" = "0" ]; then
					util_log "[$node][cons-bench] Killed (root) (pid: $i)"
				elif [ "$?" != "1" ]; then
					util_log_warn "[$node][cons-bench] Killing (root) $i failed, instance(s) might stay alive"
				fi
			elif [ "$?" != "1" ]; then
				util_log_warn "[$node][cons-bench] Killing $i failed, instance(s) might stay alive"
			fi
		done
	fi
}