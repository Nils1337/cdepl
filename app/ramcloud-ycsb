#!/bin/bash

#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# Include guard
if [ "$__CDEPL_APP_RAMCLOUD_YCSB_INCLUDED" ]; then
    return
fi

__CDEPL_APP_RAMCLOUD_YCSB_INCLUDED="1"

readonly __RAMCLOUD_YCSB_REL_BIN_YCSB="bin/ycsb"
readonly __RAMCLOUD_YCSB_REL_RC_LIB="obj.master/libramcloud.so "

readonly __RAMCLOUD_YCSB_NETWORK_PORT_COORDINATOR="11100"
readonly __RAMCLOUD_YCSB_NETWORK_PORT_SERVER="11101"

readonly __RAMCLOUD_YCSB_LOAD_DONE_COND="\[INSERT\], Return"
readonly __RAMCLOUD_YCSB_BENCH_DONE_COND="\[OVERALL\], RunTime"

readonly __RAMCLOUD_YCSB_REQUIRED_ENVIRONMENT="gcc/4.9.4 java/1.8.0 protobuf/2.6.1 boost/1.55.0 boost/1.62.0 pcre/8.38.0"

__RAMCLOUD_YCSB_PATH=""
__RAMCLOUD_YCSB_RC_PATH=""

__RAMCLOUD_YCSB_OUT_PATH=""
__RAMCLOUD_YCSB_OUT_LOG_PATH=""

__RAMCLOUD_YCSB_NODE_COORDINATOR_HOSTNAME=""
__RAMCLOUD_YCSB_NODE_RUN_SUDO=()
__RAMCLOUD_YCSB_NETWORK_TRANSPORT="basic+udp"

__RAMCLOUD_YCSB_NODE_TYPE=()
__RAMCLOUD_YCSB_TOTAL_STORAGE_NODES=""

__RAMCLOUD_YCSB_NODE_THREADS=()

# Specify workload inline
__RAMCLOUD_YCSB_WORKLOAD_RECORDCOUNT=""
__RAMCLOUD_YCSB_WORKLOAD_OPERATIONCOUNT=""
__RAMCLOUD_YCSB_WORKLOAD_READPROPORTION=""
__RAMCLOUD_YCSB_WORKLOAD_UPDATEPROPORTION=""
__RAMCLOUD_YCSB_WORKLOAD_REQUESTDISTRIBUTION=""
__RAMCLOUD_YCSB_WORKLOAD_FIELDCOUNT=""
__RAMCLOUD_YCSB_WORKLOAD_FIELDLENGTH=""

__RAMCLOUD_YCSB_NODE_INSERTSTART=()

##
# Initialize and setup the RAMCloud YCSB environment. This must be called before any
# other function of the dxram-ycsb module.
#
# $1 path Path to folder containing build output of YCSB benchmark with the
#    RAMCloud client
# $2 ramcloud_path Path to the RAMCloud installation/binaries
##
cdepl_app_ramcloud_ycsb_init()
{
    local path="$1"
    local ramcloud_path="$2"

    __RAMCLOUD_YCSB_PATH="$(cdepl_cluster_file_system_cmd "readlink -f $path")"
    __RAMCLOUD_YCSB_RC_PATH="$(cdepl_cluster_file_system_cmd "readlink -f $ramcloud_path")"

    __RAMCLOUD_YCSB_OUT_PATH="$(cdepl_run_get_cur_out_path)/ramcloud-ycsb"
    __RAMCLOUD_YCSB_OUT_LOG_PATH="${__RAMCLOUD_YCSB_OUT_PATH}/log"

    # Check if ramcloud path is available
	if [ ! "$__RAMCLOUD_YCSB_PATH" ] || [ "$(cdepl_cluster_file_system_cmd "[ -d $__RAMCLOUD_YCSB_PATH ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[ramcloud-ycsb]: Path does not exist ($path), resolved path: $__RAMCLOUD_YCSB_PATH"
	fi

    if [ "$(cdepl_cluster_file_system_cmd "[ -d $__RAMCLOUD_YCSB_RC_PATH ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[ramcloud-ycsb]: Path does not exist: $__RAMCLOUD_YCSB_RC_PATH"
	fi

    if [ "$(cdepl_cluster_file_system_cmd "[ -f ${__RAMCLOUD_YCSB_PATH}/${__RAMCLOUD_YCSB_REL_BIN_YCSB} ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[ramcloud-ycsb]: Could not find ycsb executable in $__RAMCLOUD_YCSB_PATH"
	fi

    # Output path setup
	cdepl_cluster_file_system_cmd "mkdir -p $__RAMCLOUD_YCSB_OUT_LOG_PATH"

    util_log "[ramcloud-ycsb] Initialized: $__RAMCLOUD_YCSB_PATH"
	util_log "[ramcloud-ycsb] Output: $__RAMCLOUD_YCSB_OUT_PATH"
}

##
# Set the node type for a RAMCloud coordinator
# Required to start RAMCloud
#
# $1 node Node to set as the RAMCloud coordinator
##
cdepl_app_ramcloud_ycsb_node_coordinator()
{
    local node=$1

    if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][ramcloud-ycsb] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

    __RAMCLOUD_YCSB_NODE_COORDINATOR_HOSTNAME="$(cdepl_cluster_node_resolve_node_to_hostname $node)"
}

##
# Set the node type for a RAMCloud YCSB instance running on a node.
#
# In order to declare a node an actual RAMCloud node/instance, you have to assign
# a role. There is no default node role applied, otherwise. The node will be
# ignored and not considered a RAMCloud node/instance.
#
# $1 node Node to set the RAMCloud YCSB role for
# $2 type RAMCloud YCSB node type to set for the specified node: L (load client),
#         B (benchmark client)
##
cdepl_app_ramcloud_ycsb_node_type()
{
	local node=$1
	local type=$2

	# No default values. If node type not set explicitly, node is not considered to run an instance
	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][ramcloud-ycsb] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	# Load (L) and Benchmark (B)
	case "$type" in
		"L")
			__RAMCLOUD_YCSB_NODE_TYPE[$node]="load"
			;;
		"B")
			__RAMCLOUD_YCSB_NODE_TYPE[$node]="run"
			;;
		*)
			util_log_error_and_exit "[$node][ramcloud-ycsb] Invalid node type $type for node $node"
			;;
	esac
}

##
# Run the RAMCloud YCSB instance with sudo on the target node (e.g. might be necessary
# if using InfiniBand networking)
#
# $1 node Node of the RAMCloud YCSB instance
##
cdepl_app_ramcloud_ycsb_run_as_sudo()
{
	local node=$1

	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][ramcloud-ycsb] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	if [ "$(cdepl_cluster_allows_sudo)" ]; then
		__RAMCLOUD_YCSB_NODE_RUN_SUDO[$node]="1"
	else
		util_log_warn "[$node][ramcloud-ycsb] Cluster type does not allow running commands as sudo, ignored"
	fi
}

##
# Set the network transport type of the RAMCloud instance on the target node
# Note: The type set here has to match the type set in the normal ramcloud
# module for starting the backend storage
#
# $1 node Node of the RAMCloud instance
# $2 network Network type to set, e.g. basic+udp (see RAMCloud documentation)
##
cdepl_app_ramcloud_ycsb_network_transport()
{
    local type=$1

    __RAMCLOUD_YCSB_NETWORK_TRANSPORT="$type"
}

##
# Set the total number of storage nodes for the YCSB benchmark
#
# #1 total_nodes Total number of storages nodes
##
cdepl_app_ramcloud_ycsb_total_storage_nodes()
{
	local total_nodes=$1

	__RAMCLOUD_YCSB_TOTAL_STORAGE_NODES="$total_nodes"
}

##
# Set the number of ycsb threads to run on a benchmark node
#
# $1 node Target benchmark node
# $2 threads Number of threads to start on the target benchmark node
##
cdepl_app_ramcloud_ycsb_threads()
{
	local node=$1
	local threads=$2

	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][ramcloud-ycsb] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	__RAMCLOUD_YCSB_NODE_THREADS[$node]="$threads"
}

##
# Specify an inline workload instead of using a workload config making the
# deployment script more self containing
#
# $1 recordcount Number of records to create per node
# $2 operationcount Number of operations to execute by each benchmark node
# $3 readportion Distribution of reads
# $4 updateportion Distribution of updates
# $5 requestdistribution Distribution of requests (zipfian, uniform)
# $6 fieldcount Number of fields per object
# $7 fieldlength Length of a single field
##
cdepl_app_ramcloud_ycsb_workload()
{
	local recordcount=$1
	local operationcount=$2
	local readportion=$3
	local updateportion=$4
	local requestdistribution=$5
	local fieldcount=$6
	local fieldlength=$7

	__RAMCLOUD_YCSB_WORKLOAD_RECORDCOUNT="$recordcount"
	__RAMCLOUD_YCSB_WORKLOAD_OPERATIONCOUNT="$operationcount"
	__RAMCLOUD_YCSB_WORKLOAD_READPROPORTION="$readportion"
	__RAMCLOUD_YCSB_WORKLOAD_UPDATEPROPORTION="$updateportion"
	__RAMCLOUD_YCSB_WORKLOAD_REQUESTDISTRIBUTION="$requestdistribution"
	__RAMCLOUD_YCSB_WORKLOAD_FIELDCOUNT="$fieldcount"
	__RAMCLOUD_YCSB_WORKLOAD_FIELDLENGTH="$fieldlength"
}

##
# Set the insert start offset when creating/inserting objects during loading
#
# $1 node Target storage node
# $2 insertstart Insert start offset for chunk IDs
##
cdepl_app_ramcloud_ycsb_insertstart()
{
	local node=$1
	local insertstart=$2

	if [ "$node" -ge "$(cdepl_cluster_get_alloc_node_count)" ]; then
		util_log_error_and_exit "[$node][ramcloud-ycsb] Invalid node id $node > $(cdepl_cluster_get_alloc_node_count)"
	fi

	__RAMCLOUD_YCSB_NODE_INSERTSTART[$node]="$insertstart"
}

##
# Wrapper to set workload a
#
# $1 recordcount Number of records to create per node
# $2 operationcount Number of operations to execute by each benchmark node
##
cdepl_app_ramcloud_ycsb_workload_a()
{
	local recordcount=$1
	local operationcount=$2

	cdepl_app_ramcloud_ycsb_workload $recordcount $operationcount "0.5" "0.5" "zipfian" "10" "100"
}

##
# Wrapper to set workload b
#
# $1 recordcount Number of records to create per node
# $2 operationcount Number of operations to execute by each benchmark node
##
cdepl_app_ramcloud_ycsb_workload_b()
{
	local recordcount=$1
	local operationcount=$2

	cdepl_app_ramcloud_ycsb_workload $recordcount $operationcount "0.95" "0.05" "zipfian" "10" "100"
}

##
# Wrapper to set workload g
#
# $1 recordcount Number of records to create per node
# $2 operationcount Number of operations to execute by each benchmark node
##
cdepl_app_ramcloud_ycsb_workload_g()
{
	local recordcount=$1
	local operationcount=$2

	cdepl_app_ramcloud_ycsb_workload $recordcount $operationcount "0.5" "0.5" "zipfian" "1" "64"
}

##
# Start a RAMCloud YCSB instance on the target node.
#
# $1 node_range_start Node id to start instance on (or range start)
# $2 node_range_end (optional) If specified, all nodes from the range start to
#    end are started
##
cdepl_app_ramcloud_ycsb_start_node()
{
	local node_range_start=$1
	local node_range_end=$2

    # We must know the coordinator to bootstrap
    if [ ! "$__RAMCLOUD_YCSB_NODE_COORDINATOR_HOSTNAME" ]; then
        util_log_error_and_exit "[ramcloud-ycsb] Can't start any nodes. Please specify the node where the coordinator is started"
    fi

	if [ "$node_range_end" ]; then
		local pids=""
		
		for node in $(seq $node_range_start $node_range_end); do
			__cdepl_app_ramcloud_ycsb_start_node $node &
			pids="$pids $!"
		done

		wait $pids
	else
		__cdepl_app_ramcloud_ycsb_start_node $node_range_start
	fi
}

##
# Check for a YCSB storage instance if it finished loading
#
# $1 node Node id of a strange node to check
# $2 hide_progress (optional) Set to 1 to hide output of the loading progress
##
cdepl_app_ramcloud_ycsb_storage_finished_loading()
{
	local node=$1
	local hide_progress=$2

    local type="${__RAMCLOUD_YCSB_NODE_TYPE[$node]}"
    local logfile=${__RAMCLOUD_YCSB_OUT_LOG_PATH}/node${node}_${type}

	util_log "[$node][ramcloud-ycsb][$type] Waiting for loading to finish: $__RAMCLOUD_YCSB_LOAD_DONE_COND"

	local first_progress=1

	while true; do
		if [ ! "$hide_progress" ]; then
			cdepl_cluster_node_cmd $node "ls ${__RAMCLOUD_YCSB_OUT_LOG_PATH} > /dev/null 2>&1"
			local progress=$(cdepl_cluster_node_cmd $node "cat $logfile | grep 'current ops' | tail -n 1")

			if [ ! "$progress" ]; then
				echo -n "."
			else
				if [ "$first_progress" = "1" ]; then
					first_progress=0
					echo ""
				fi

				echo "[$node] ${progress}"
			fi
		else
			echo -n "."
		fi

		local success=$(cdepl_cluster_node_cmd $node "cat $logfile 2> /dev/null | sed 's,\x1B\[[0-9;]*[a-zA-Z],,g' | grep '$__RAMCLOUD_YCSB_LOAD_DONE_COND'")
		# Abort execution after an exception was thrown
		local fail_error=$(cdepl_cluster_node_cmd $node "cat $logfile 2> /dev/null | sed 's,\x1B\[[0-9;]*[a-zA-Z],,g' | grep -i 'exception'")
		# "A fatal error" -> JVM segfaults
		local fail_error2=$(cdepl_cluster_node_cmd $node "cat $logfile 2> /dev/null | sed 's,\x1B\[[0-9;]*[a-zA-Z],,g' | grep -i -e '\[ERROR\]' -e '\# A fatal error'")

		if [ "$success" ]; then
			util_log "[$node][ramcloud-ycsb][$type] Storage loading complete"

			break
		elif [ "$fail_error" ] || [ "$fail_error2" ]; then
			echo ""
			util_log_error_and_exit "[$node][ramcloud-ycsb][$type] Failed, error or exception. See log file $logfile"
			return 1
		fi

		sleep 1.0
	done

	return 0
}

##
# Check for a YCSB benchmark instance if it running the benchmark
#
# $1 node Node id of a benchmark node to check
# $2 hide_progress (optional) Set to 1 to hide output of the benchmark progress
##
cdepl_app_ramcloud_ycsb_benchmark_wait_finished()
{
	local node=$1
	local hide_progress=$2

    local type="${__RAMCLOUD_YCSB_NODE_TYPE[$node]}"
    local logfile=${__RAMCLOUD_YCSB_OUT_LOG_PATH}/node${node}_${type}

	util_log "[$node][ramcloud-ycsb][$type] Waiting for benchmark to finish: $__RAMCLOUD_YCSB_BENCH_DONE_COND"

	local first_progress=1

	while true; do
		if [ ! "$hide_progress" ]; then
			local progress=$(cdepl_cluster_node_cmd $node "cat $logfile | grep 'current ops' | tail -n 1")

			if [ ! "$progress" ]; then
				echo -n "."
			else
				if [ "$first_progress" = "1" ]; then
					first_progress=0
					echo ""
				fi

				echo "[$node] ${progress}"
			fi
		else
			echo -n "."
		fi

		local success=$(cdepl_cluster_node_cmd $node "cat $logfile 2> /dev/null | sed 's,\x1B\[[0-9;]*[a-zA-Z],,g' | grep '$__RAMCLOUD_YCSB_BENCH_DONE_COND'")
		# Abort execution after an exception was thrown
		local fail_error=$(cdepl_cluster_node_cmd $node "cat $logfile 2> /dev/null | sed 's,\x1B\[[0-9;]*[a-zA-Z],,g' | grep -i 'exception'")
		# "A fatal error" -> JVM segfaults
		local fail_error2=$(cdepl_cluster_node_cmd $node "cat $logfile 2> /dev/null | sed 's,\x1B\[[0-9;]*[a-zA-Z],,g' | grep -i -e '\[ERROR\]' -e '\# A fatal error'")

		if [ "$success" ]; then
			util_log "[$node][ramcloud-ycsb][$type] Benchmark completed"

			break
		elif [ "$fail_error" ] || [ "$fail_error2" ]; then
			echo ""
			util_log_error_and_exit "[$node][ramcloud-ycsb][$type] Failed, error or exception. See log file $logfile"
			return 1
		fi

		sleep 1.0
	done

	return 0
}

__cdepl_app_ramcloud_ycsb_start_node()
{
    local node=$1

    local type="${__RAMCLOUD_YCSB_NODE_TYPE[$node]}"

    if [ ! "$type" ]; then
        util_log_error_and_exit "[$node][ramcloud-ycsb] No node type specified"
    fi

    local logfile=${__RAMCLOUD_YCSB_OUT_LOG_PATH}/node${node}_${type}

    util_log "[$node][ramcloud-ycsb][$type] Starting client, logfile: $logfile"

    local hostname=$(cdepl_cluster_node_resolve_node_to_hostname $node)

    local root=""
    
	if [ "${__RAMCLOUD_NODE_RUN_SUDO[$node]}" = "1" ]; then
		util_log "[$node][ramcloud-ycsb][$type] Running with sudo"
		root="sudo -P"
	fi

    local args=""

    # Node type: load or run
    args="$type"
	# Workload parameter is required but overridden
    args="${args} ramcloud -s -P workloads/workloada"

    if [ ! "${__RAMCLOUD_YCSB_TOTAL_STORAGE_NODES}" ]; then
        util_log_error_and_exit "[$node][ramcloud-ycsb][$type] No total storage nodes specified"
    fi

    args="${args} -p ramcloud.tableServerSpan=${__RAMCLOUD_YCSB_TOTAL_STORAGE_NODES}"

    # Get some log output
    args="${args} -p ramcloud.debug=true"

    # Coordinator locator
    args="${args} -p ramcloud.coordinatorLocator=${__RAMCLOUD_YCSB_NETWORK_TRANSPORT}:host=${__RAMCLOUD_YCSB_NODE_COORDINATOR_HOSTNAME},port=${__RAMCLOUD_YCSB_NETWORK_PORT_COORDINATOR}"

    if [ ! "${__RAMCLOUD_YCSB_NODE_THREADS[$node]}" ]; then
		# Auto default to single thread
		__RAMCLOUD_YCSB_NODE_THREADS[$node]="1"
	fi

	if [ ! "${__RAMCLOUD_YCSB_NODE_INSERTSTART[$node]}" ] && [ "$type" = "load" ]; then
		util_log_error_and_exit "[$node][ramcloud-ycsb][$type] Missing value for insertstart parameter for storage"
	fi

	if [ "${__RAMCLOUD_YCSB_NODE_INSERTSTART[$node]}" ]; then
		args="$args -p insertstart=${__RAMCLOUD_YCSB_NODE_INSERTSTART[$node]}"
	fi

	args="$args -p scanproportion=0.0"
	args="$args -p updateproportion=0.0"

	if [ "$__RAMCLOUD_YCSB_WORKLOAD_RECORDCOUNT" ]; then
		args="$args -p recordcount=$__RAMCLOUD_YCSB_WORKLOAD_RECORDCOUNT"
	fi

	if [ "$__RAMCLOUD_YCSB_WORKLOAD_OPERATIONCOUNT" ]; then
		args="$args -p operationcount=$__RAMCLOUD_YCSB_WORKLOAD_OPERATIONCOUNT"
	fi

	if [ "$__RAMCLOUD_YCSB_WORKLOAD_READPROPORTION" ]; then
		args="$args -p readproportion=$__RAMCLOUD_YCSB_WORKLOAD_READPROPORTION"
	fi

	if [ "$__RAMCLOUD_YCSB_WORKLOAD_UPDATEPROPORTION" ]; then
		args="$args -p updateproportion=$__RAMCLOUD_YCSB_WORKLOAD_UPDATEPROPORTION"
	fi

	if [ "$__RAMCLOUD_YCSB_WORKLOAD_REQUESTDISTRIBUTION" ]; then
		args="$args -p requestdistribution=$__RAMCLOUD_YCSB_WORKLOAD_REQUESTDISTRIBUTION"
	fi

	if [ "$__RAMCLOUD_YCSB_WORKLOAD_FIELDCOUNT" ]; then
		args="$args -p fieldcount=$__RAMCLOUD_YCSB_WORKLOAD_FIELDCOUNT"
	fi

	if [ "$__RAMCLOUD_YCSB_WORKLOAD_FIELDLENGTH" ]; then
		args="$args -p fieldlength=$__RAMCLOUD_YCSB_WORKLOAD_FIELDLENGTH"
	fi

    args="$args -threads ${__RAMCLOUD_YCSB_NODE_THREADS[$node]}"

    # Don't use && instead of ;
	# This will hang if the ssh with controlmaster and nohup is used
	cdepl_cluster_node_cmd $node "cd $RAMCLOUD_YCSB_PATH ; LD_PRELOAD=${__RAMCLOUD_YCSB_RC_PATH}/${__RAMCLOUD_YCSB_REL_RC_LIB} $root nohup $__RAMCLOUD_YCSB_REL_BIN_YCSB $args > $logfile 2>&1 &" "$__RAMCLOUD_YCSB_REQUIRED_ENVIRONMENT"
}