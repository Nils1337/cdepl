#!/bin/bash

#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# Include guard
if [ "$__CDEPL_APP_REDIS_INCLUDED" ]; then
    return
fi

__CDEPL_APP_REDIS_INCLUDED="1"

__REDIS_PATH=""
__REDIS_OUT_PATH=""
__REDIS_EXECUTABLE=""
__REDIS_CLIENT_EXECUTABLE=""
__REDIS_TRIB_EXECUTABLE=""
__REDIS_BENCHMARK_EXECUTABLE=""

__REDIS_PORT=7000

##
# Initialize and setup Redis environment. This must be called before any other
# function of the Redis module.
#
# $1 Path to folder containing build output of Redis
# $2 Amount of nodes
# $3 Port on which the redis-server will run
##
cdepl_app_redis_init()
{
	local redis_path=$1
	local nodes=$2
	local port=$3

	# Redis-executables are located in the source-folder...
	__REDIS_PATH="$(cdepl_cluster_file_system_cmd "realpath ${redis_path}")"
	__REDIS_EXECUTABLE="${__REDIS_PATH}/src/redis-server"
	__REDIS_CLIENT_EXECUTABLE="${__REDIS_PATH}/src/redis-cli"
	__REDIS_TRIB_EXECUTABLE="${__REDIS_PATH}/src/redis-trib.rb"
	__REDIS_BENCHMARK_EXECUTABLE="${__REDIS_PATH}/src/redis-benchmark"
	__REDIS_OUT_PATH="$(cdepl_run_get_cur_out_path)"

	if [ ! -z $port ]; then
		__REDIS_PORT=$port
	fi

	if [ ! "$__REDIS_PATH" ] || [ "$(cdepl_cluster_file_system_cmd "[ -d ${__REDIS_PATH} ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[redis]: Path does not exist ($path), resolved path: ${__REDIS_PATH}"
	fi

	if [ "$(cdepl_cluster_file_system_cmd "[ -f ${__REDIS_EXECUTABLE} ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[redis]: File does not exist: ${__REDIS_EXECUTABLE}"
	fi

	if [ "$(cdepl_cluster_file_system_cmd "[ -f ${__REDIS_BENCHMARK_EXECUTABLE} ] && echo \"1\"")" != "1" ]; then
		util_log_error_and_exit "[login][redis]: File does not exist: ${__REDIS_BENCHMARK_EXECUTABLE}"
	fi

	__cdepl_app_redis_check_ruby

	# Initialize output folder
	cdepl_cluster_file_system_cmd "mkdir -p ${__REDIS_OUT_PATH}/conf"
	cdepl_cluster_file_system_cmd "mkdir -p ${__REDIS_OUT_PATH}/log"

	util_log "[redis] Initialized: ${__REDIS_PATH}"
	util_log "[redis] Output: ${__REDIS_OUT_PATH}"
}

##
# Start Redis on a specified node
#
# $1 The node-number
##
cdepl_app_redis_start_node()
{
	local node=$1

	util_log "[$node][redis] Starting Redis..."
	cdepl_cluster_node_cmd $node "nohup ${__REDIS_EXECUTABLE} --port ${__REDIS_PORT} --cluster-enabled yes --cluster-config-file ${__REDIS_OUT_PATH}/conf/node_${node}.conf --cluster-node-timeout 5000 --appendonly no --protected-mode no --daemonize yes > ${__REDIS_OUT_PATH}/log/node_${node}.log 2>&1 &"
}

##
# Wait for Redis to finish initializing on a specified node
#
# $1 The node-number
##
cdepl_app_redis_wait_finished()
{
	local node=$1

	local log_path="${__REDIS_OUT_PATH}/log/node_${node}.log"
	local ready=$(cdepl_cluster_node_cmd $node "cat '${log_path}' | grep 'Configuration loaded'")
	local i=0

	while [ -z "$ready" ]; do
		if [ "$i" -gt "29" ]; then
			util_log_error_and_exit "[$node][redis] Redis did not finish initializing after 30 seconds! Cleaning up node..."
		fi

		sleep 1s

		ready=$(cdepl_cluster_node_cmd $node "cat '${log_path}' | grep 'Configuration loaded'")
		i=$((i + 1))
	done
}

##
# Executes redis-trib.rb-script on node 0.
# This lets multiple redis-instances work together as a cluster.
##
cdepl_app_redis_form_cluster()
{
	local nodes=("${@}")
	local node_count=${#nodes[@]}

	util_log "[redis] Forming Redis-cluster..."
	
	if [ $node_count -eq 1 ]; then
		local stub=""
	elif [ $node_count -eq 2 ]; then
		util_log_warn "[redis] Redis is currently running on only two nodes! A Redis-cluster needs to consist of at least three nodes. Using only a single node..."
	else
		local command="echo yes | ${__REDIS_TRIB_EXECUTABLE} create --replicas 0"
		for i in $(seq 0 $((node_count - 1))); do
			command+=" $(cdepl_cluster_resolve_node_to_ip "${nodes[$i]}"):${__REDIS_PORT}"
		done
		
		cdepl_cluster_node_cmd 0 "${command}"
	fi
}

##
# Start the Redis-benchmark
#
# $1 The node, on which the benchmark will be started
# $2 The node, to which the benchmark will connect (Must be any of the nodes on which Aerospike is running)
# $3 Amount of requests to be performed by the benchmark
##
cdepl_app_redis_start_bench()
{
	local node=$1
	local server_node=$2
	local requests=$3

	util_log "[$node][redis] Running Benchmark..."
	cdepl_cluster_node_cmd $node "${__REDIS_BENCHMARK_EXECUTABLE} -h $(cdepl_cluster_node_resolve_node_to_hostname "$server_node") -p ${__REDIS_PORT} -n ${requests}"
}

##
# Stop Redis on a specified node
#
# $1 The node-number
##
cdepl_app_redis_node_cleanup()
{
	local node=$1

	cdepl_cluster_node_cmd $node "pkill -9 redis"
}

##
# Check if Ruby and the Redis ruby-package are installed on the first node.
# This is necessary, because Redis uses a Ruby-script to form a cluster
# of multiple running instances of Redis.
##
__cdepl_app_redis_check_ruby()
{
	# Check if Ruby is installed on the first node.
	cdepl_cluster_node_cmd 0 "command -v ruby" > /dev/null 2>&1

	if [ "$?" != "0" ]; then
		util_log_error_and_exit "[0][redis] Ruby must be installed on node 0 in order to form a Redis-cluster!"
	fi

	# Check if the redis ruby-pacakge is installed
	cdepl_cluster_node_cmd 0 "gem list -i redis" > /dev/null 2>&1

	if [ "$?" != "0" ]; then
		util_log_error_and_exit "[0][redis] The Redis-library for Ruby must be installed on node 0 in order to form a Redis-cluster! Try running 'gem install redis' on this node."
	fi
}